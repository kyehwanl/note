
How to Configure Aiab + 3 UPF with UERANSIM
============================================
https://github.com/dot-1q/AiaB-UERANSIM/tree/master/scenario_1



1. Vagrant file 

	VM1 = "sdcore"
	VM2 = "ran"

	HostName1 = "sdcore"
	HostName2 = "ran"

	IP1 = "10.10.1.1"
	IP2 = "10.10.1.2"
	IP3 = "10.10.1.3"

	servers = [
	  { :hostname => HostName1, :ip => IP1, :memory => "12288", :vm => VM1, :cpu => 4},
	  { :hostname => HostName2, :ip => IP2, :memory => "4096", :vm => VM2, :cpu => 2 },
	]

	$script = <<-SCRIPT
	apt update
	apt install -y make vifm bash-completion
	SCRIPT

	Vagrant.configure("2") do |config|
	  config.vm.box = "bento/ubuntu-18.04"
	  servers.each do |conf|
		config.vm.define conf[:vm] do |node|
		  node.vm.hostname = conf[:hostname]
		  node.vm.network "private_network", ip: conf[:ip]
		  node.vm.synced_folder ".", "/vagrant"

		  node.vm.provider "virtualbox" do |vb|
			vb.memory = conf[:memory]
			vb.cpus = conf[:cpu]
			#vb.gui = true
		  end
		  node.vm.provision "shell", inline: $script, privileged: true
		end
	  end
	end


2. Aether download

	git clone "https://gerrit.opencord.org/aether-in-a-box"



3. Installation should be done for SD-Core and UERANSIM combination

	3.1 refer to UERANSIM Deployment Guide 
		(https://docs.sd-core.opennetworking.org/master/deployment/deploymentueransim.html#) 



	3.2 check all work

4. Create a new namespace for the new UPF (upf2 in this example)

	kubectl create namespace upf2


5. Create a new helm chart (upf2.yaml) for the new UPF
	(https://github.com/dot-1q/AiaB-UERANSIM/tree/master/scenario_1/aiab)

	enable: true
	  resources:
		enabled: false
	  images:
		repository: "registry.opennetworking.org/docker.io/"
	  config:
		upf:
		  name: "oaisim"
		  sriov:
			enabled: false #default sriov is disabled in AIAB setup
		  hugepage:
			enabled: false #should be enabled if dpdk is enabled
		  cniPlugin: macvlan
		  ipam: static
		  routes:
			- to: "10.0.2.15" #This is the IP of my internet facing interface. Replace with yours
			  via: 169.254.1.1
		  enb:
			subnet: "10.10.1.0/24" #this is your gNB network
		  access:
			iface: "eth1"
			ip: "192.168.252.4/24" #New IP address for UPF2 access interface
		  core:
			iface: "eth1"
			ip: "192.168.250.4/24" #New IP address for UPF2 core interface
		  cfgFiles:
			upf.json:
			  mode: af_packet  #this mode means no dpdk
			  hwcksum: true
			  log_level: "trace"
			  gtppsc: true #extension header is enabled in 5G. Sending QFI in pdu session extension header
			  cpiface:
				dnn: "internet" #keep it matching with Slice dnn
				hostname: "upf"
				#http_port: "8080"
				enable_ue_ip_alloc: false # if true then it means UPF allocates address from below pool
				ue_ip_pool: "172.250.0.0/16" # UE ip pool is used if enable_ue_ip_alloc is set to true



5.1  upf instalA with helm
	vagrant@sdcore:~/aether-in-a-box$ helm upgrade --install -f upf2.yaml upf2 aether/bess-upf --namespace upf2

5.2 roc installation
	vagrant@sdcore:~/aether-in-a-box$ ENABLE_GNBSIM=false DATA_IFACE=eth1  make roc-5g-models


	vagrant@sdcore:~/aether-in-a-box$ k get svc -n aether-roc                                                                       
	NAME                                               TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE  
	aether-mock-exporter                               ClusterIP   192.168.85.125   <none>        2112/TCP,8081/TCP            152m 
	aether-roc-umbrella-aether-roc-api                 ClusterIP   192.168.85.94    <none>        8181/TCP                     152m 
	aether-roc-umbrella-aether-roc-gui-v2-1            NodePort    192.168.85.149   <none>        80:9713/TCP                  152m 
	aether-roc-umbrella-aether-roc-gui-v2-1-external   NodePort    192.168.85.34    <none>        80:31194/TCP                 152m 
	aether-roc-umbrella-grafana                        ClusterIP   192.168.85.52    <none>        80/TCP                       152m 
	aether-roc-umbrella-sdcore-adapter-v2-1            ClusterIP   192.168.85.42    <none>        5150/TCP,9851/TCP,8080/TCP   152m 
	onos-config                                        ClusterIP   192.168.85.87    <none>        5150/TCP,5151/TCP            152m 
	onos-consensus-store                               ClusterIP   192.168.85.249   <none>        5678/TCP,5679/TCP            152m 
	onos-consensus-store-hs                            ClusterIP   None             <none>        5678/TCP,5679/TCP            152m 
	onos-topo                                          ClusterIP   192.168.85.112   <none>        5150/TCP                     152m 



6. The next steps involve the Aether ROC GUI. Screenshots with the correct configurations are provided here.
	(https://github.com/dot-1q/AiaB-UERANSIM/blob/master/scenario_1/images)

  6.1 Add a new IP pool for the UPF subscribers (Configuration -> IP Domain).
  6.2 Create the new sim cards and devices if you've provisioned new imsi's. Here are the instructions.
  6.3 Create a new device group for the devices that belong together for each UPF/Slice.
  6.4 Create the new UPF. Keep in mind that the Config Endpoint should be http://upf-http.<namespace>.svc:8080. and Address should be upf.<namespace>. Insert the namespace of your new UPF (upf2).
  6.5 Create a new slice and associate the newly created UPF to it.




7. ip route rules need to be added

  Aiab VM - We need to establish a route to the UPF subscribers, via their UPF Core interface.
	  ip route add 172.252.0.0/16 via 192.168.250.4

  UERANSIM VM - Setup a static route to the new UPF Access interface via DATA_IFACE.
	  sudo ip route add 192.168.252.4 via 10.10.1.1




















