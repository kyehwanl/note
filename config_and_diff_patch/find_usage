0. Based on Access / Modification / Changed Time
=================================================
-mmin  n : File's data was last modified n minutes ago.
-mtime n : File's data was last modified n*24 hours ago

    (1) Numeric arguments can be specified as
       +n      for greater than n,
       -n      for less than n,
        n      for exactly n.

    (2) type
      -cmin -60 # creation time
      -mmin -60 # modification time
      -amin -60 # access time

# find . -mmin -60  --> whose content got updated within last 1 hour (60 minutes)
# find . -mtime -1  --> that got updated within the last 24 hours (1 day).
  (example) find . -mmin -60 -type f -exec ls -l {} \;


     (3) Differences
        find . -exec grep chrome {} \;
        find . -exec grep chrome {} +

        find will execute grep and will substitute {} with the filename(s) found.
        The difference between ; and + is that with ; a single grep command for each file is executed
        whereas with + as many files as possible are given as parameters to grep at once.


        In short,
        find . -exec grep foo {} + will show you output like this,   ./dir/file.py:from foo import bar
        find . -exec grep foo {} \; will show you output like this,  from foo import bar



1. Restricting the search only to unhidden files. (Do not display hidden files in find output)
=================================================
# find . -mtime -2 \( ! -regex ".*/\..*" \)  --> time: n*24 hours 



2. Finding the Top 5 Big Files
===============================
# find . -type f -exec ls -s {} \; | sort -n -r | head -5



3. Inverting the match
=======================
(1) List only the non-hidden empty files only in the current directory
# find . -maxdepth 1 -empty -not -name ".*"

(2) Shows the files or directories whose name are not MyCProgram.c under current directory
# find -maxdepth 1 -not -iname "MyCProgram.c"



4. Find files by Size - files bigger(+) than the given size
=====================
# find ~ -size +100M



5. Exclusion with Prune
========================
(1) including 'test' but exclude the files inside 'test' directory itself
$ find . -name test -prune

(2) same result with (1) but print others 
$ find . -name test -prune -o -print   (-o measn OR)

(3) list all other files except 'bgpd' and 'ospfd' directories and files including 'bgpd' and 'ospfd' strings
$ find . \( -name "bgpd*" -o -name "ospfd*" \) -prune -o -print


(4) If you want to exclude the misc directory just add a -path ./misc -prune -o
    find . -path ./misc -prune -false -o -name '*.txt'

    (example for multiple directories)
    find . -type d \( -path dir1 -o -path dir2 -o -path dir3 \) -prune -false -o -name '*.txt'

        Here we exclude ./dir1, ./dir2 and ./dir3 in the current directory, since in find expressions 
        it is an action that acts on the criteria -path dir1 -o -path dir2 -o -path dir3 
        (if dir1 or dir2 or dir3), ANDed with type -d

(5) To exclude directory name at any level, use -name
    find . -type d \( -name node_modules -o -name dir2 -o -path name \) -prune -false -o -name '*.json'


 (c.f) source link for (4,5) 
    https://stackoverflow.com/questions/4210042/how-to-exclude-a-directory-in-find-command/49149445


6. Examples at some casees with applications  
============================================

(1) cscope & ctags
find ./ -name '*.[ch]' | ctags -R -L -
find ./ -name '*.[ch]' > cscope.files (or when you exclude something, use 'grep -v "something"')
 e.g., --> find ./ -name '*.[ch]' | grep -v 'test_install'
cscope -b

 <CAUTION>
 If vim cannot find headers or links, try to use physical path($PWD) instead of relative path(./) in 'find' command.


(2) diff & patch
find ./ -name '*.[ch]' -exec diff -wibuNp {} ../0198-09-KH/{} \; > patch_09
find ./ -type f \( -name '*.[ch]' -o -name 'Makefile.am' \) -exec file {} \; | less

#practical example :  
    If there are two old-verion/  new-version/ directories,
    then "cd old-version" and command following line.

    find ./ -type f \( -name '*.[ch]' -o -name 'Makefile.am' \) -exec diff -wibuNp {} ../new/{} \; > patch.diff
    diff --exclude=.p4config -uNR quagga/Makefile.am quagga-mpls/Makefile.am

 <CAUTION>
 if you just want to know what differences between orig and new(not patch purpose), just do diff without -N option. 
 Because -N option will generate lot's of new file lines unless either directory doesn't have same file.

#practical examples with Regular expression in Find
  find -name "*.xls" -o -name "*.csv" ==  find -regex ".*\.\(xls\|csv\)"
  find -regex ".*\.\([ch]\|ac\|am\|in\|m4\)"

  find -type d -path ./extras/local -prune -false -o -regex ".*\.\([ch]\|ac\|am\|in\|m4\)" --> Exclude ./extras/local dir
  find -type d -path ./extras/local -prune -false -o -regex ".*\.\([ch]\|ac\|am\|in\|m4\)" -exec diff -wibuNp /dir1/{} /dir2/{} \; 

#etc
  find ./ -name "filename" | xargs command





7. 확장자 두개를 모두 찾기 위해서 '-o'를 사용 & regular expression
==================================================================

(1) find -name "*.xls" -o -name "*.csv"

    If you absolutely want to use regex simply use (regular expression)
    find -regex ".*\.\(xls\|csv\)"


(2) find ./ -type f \( -name '*.[ch]' -o -name 'Makefile.am' \) -exec file {} \; | less
    --> -exec를 두 개의 -name으로 찾은 것들에 모두 적용할 수 있다.

(3) find ./ -name '*.[ch]' -o -name 'Makefile.am' -exec ls {} \; | less 
    --> -exec가 마지막 것에만 적용됨

    왜냐하면 -type f가 -o (or)로 찾은것을 모두 묶어서 포함시킨다  (Same as 5.(4) above)

(4) -exec 를 쓸경우 주의!! 
    find ./ \( -name '*.[ch]' -o -name '*.am' -o -name '*.ac' \) -exec ls  {} \;
    괄호 ()가 없으면 마지막에 있는 *.ac만 적용되어 exec 뒤의 명령에 전달된다




8. Recent Used Examples
========================

(1) For comparision between two git repositories 

    find -regex ".*\.\([ch]\|ac\|am\|in\|m4\)" -exec diff -wibuNp {} /opt/project/Github_usnistgov/NIST-GitLab/srx-server/{} \;
    find -regex ".*\.\([ch]\|ac\|am\|in\|m4\)" -exec diff -wibuNp {} /opt/project/Github_usnistgov/NIST-GitLab/quagga-srx/{} \;



9. xargs
========
(1)
    find ./ -name '*.tar.gz' | xargs -I % echo %  --> vertical print out
    find ./ -name '*.tar.gz' | xargs echo {}      --> print out concatenately

(2)
    $ cat foo.txt
    one
    two
    three

    $ cat foo.txt | xargs -I % sh -c 'echo %; mkdir %'
    one 
    two
    three

    $ ls 
    one two three

(3) 
    $ find Pictures/tecmint/ -name "*.png" -type f -print0 | xargs -0 tar -cvzf images.tar.gz




10. Exclude files
==================
(https://stackoverflow.com/questions/22558245/exclude-list-of-files-from-find)

(1) find /dir -name "*.gz" ! -name first_skip ! -name second_skip .... etc

    ex) find ./ \( -name '*.[ch]' -o -name '*.am' -o -name '*.ac' -o -name '*.conf' \) ! -name 'config.h' ! -name 'srxproxy64.conf'


(2) I don't think find has an option like this, you could build a command using printf and your exclude list:

    find /dir -name "*.gz" $(printf "! -name %s " $(cat skip_files))







ETC. Latest use case
=====================

(1) in vifm 
    find ./ \( -name '*.[ch]' -o -name '*.am' -o -name '*.ac' -o -name '*.conf' \) ! -name 'config.h' ! -name 'srxproxy64.conf' -exec diff -wibuNp %D/{} {} \; > temp1-gitlab.patch






