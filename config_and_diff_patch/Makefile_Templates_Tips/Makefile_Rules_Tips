

=======================
 Makefile Rules & Tips
=======================

0. Core Automatic Variables

  From Managing Projects with GNU Make, 3rd Edition, p. 16 (it's under GNU Free Documentation License):

  Automatic variables are set by make after a rule is matched. 
  They provide access to elements from the target and prerequisite lists so you don’t have to explicitly specify any filenames. 
  They are very useful for avoiding code duplication, but are critical when defining more general pattern rules.

  There are seven “core” automatic variables:

  $@: The filename representing the target.
  $%: The filename element of an archive member specification.
  $<: The filename of the first prerequisite.
  $?: The names of all prerequisites that are newer than the target, separated by spaces.
  $^: The filenames of all the prerequisites, separated by spaces. This list has duplicate filenames removed since for most uses, such as compiling, copying, etc., duplicates are not wanted.
  $+: Similar to $^, this is the names of all the prerequisites separated by spaces, except that $+ includes duplicates. This variable was created for specific situations such as arguments to linkers where duplicate values have meaning.
  $*: The stem of the target filename. A stem is typically a filename without its suffix. Its use outside of pattern rules is discouraged.

    In addition, each of the above variables has two variants for compatibility with other makes. 
    One variant returns only the directory portion of the value. 
    This is indicated by appending a “D” to the symbol, $(@D), $(<D), etc. 
    The other variant returns only the file portion of the value. 
    This is indicated by appending an “F” to the symbol, $(@F), $(<F), etc. 
    Note that these variant names are more than one character long and so must be enclosed in parentheses. 
    GNU make provides a more readable alternative with the dir and notdir functions


1. firstword 

$(firstword names...)
The argument names is regarded as a series of names, separated by whitespace. 
The value is the first name in the series. The rest of the names are ignored.
For example,

	$(firstword foo bar)
	produces the result `foo'. Although $(firstword text) is the same as $(word 1,text), 
	the firstword function is retained for its simplicity.


2. wildcard 

$(wildcard pattern)
The argument pattern is a file name pattern, typically containing wildcard characters (as in shell file name patterns). 
The result of wildcard is a space-separated list of the names of existing files that match the pattern. 


3. realpath (Shell command)

  vmware-005 [2004]{/tmp}$ realpath $PWD
  /tmp



4. MAKEFILE_LIST

 # This must be the first line in Makefile.common
 TOP := $(dir $(firstword $(MAKEFILE_LIST)))

  From the documentation:

  As make reads various makefiles, including any obtained from the MAKEFILES variable, 
  the command line, the default files, or from include directives, their names will be automatically 
  appended to the MAKEFILE_LIST variable. They are added right before make begins to parse them. 
  This means that if the first thing a makefile does is examine the last word in this variable, 
  it will be the name of the current makefile. Once the current makefile has used include, however, 
  the last word will be the just-included makefile.



5. To get current relative directory of your Makefile?
    (https://stackoverflow.com/questions/18136918/how-to-get-current-relative-directory-of-your-makefile)

    ROOT_DIR:=$(shell dirname $(realpath $(firstword $(MAKEFILE_LIST))))



6. dirname (shell command)

  Examples, 

  dirname /usr/bin/          -> "/usr"                    
  dirname dir1/str dir2/str  -> "dir1" followed by "dir2" 
  dirname stdio.h            -> "."




7. normal-prerequisites | order-only-prerequisites 
   --> Another words, 
    The reason why '|' is used 
    (like, test: | 4g-core $(M)/oaisim)

  (https://stackoverflow.com/questions/37957428/keyword-in-makefile-prerequisites)

  targets : normal-prerequisites | order-only-prerequisites
  ...

  The targets will not be updated if the order-only-prerequisites is changed.
  Reference: https://www.gnu.org/software/make/manual/html_node/Prerequisite-Types.html


 
  (Example, https://stackoverflow.com/questions/58039810/makefiles-what-is-an-order-only-prerequisite)

    Suppose you have a Makefile like this

      baby: love
          touch $@

      love: 
          touch $@


    then make says,

      touch love
      touch baby


    now you rm love and again make say

      touch love
      touch baby


    because in order to make baby you must make love, and every time you make love, you must make baby. 
    However, suppose you don't want to make baby every time you make love. In that case you can use a pipe.

      baby: | love
          touch $@


    now you rm love and make says only

      touch love


    because although in order to make baby you must make love, 
    it is not the case that every time you make love, you must make baby.




















