
<Example.1>
=============
- Extracted from ..Programming/time-measure/tm-library/util_getrusage

    #! /bin/sh 
    set -x
    /bin/sh /usr/bin/libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I..  -g -O0 -Wall  -c -o util_time_measure.lo util_time_measure.c
    /bin/sh /usr/bin/libtool --tag=CC   --mode=link gcc  -g -O0 -Wall  -I.  -o libtm_util.la util_time_measure.lo -lrt -rpath `pwd`

    @# main program compile
    @# gcc -o util_main util_main.c -L./.libs/ -ltm_util -lrt -Wl,-rpath -Wl,/dir/.libs



<Example.2>
============
- Extracted from ..Programming/time-measure/tm-library/tm_rdtsc

    /usr/bin/libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I..  -g -O0 -Wall  -c -o libtm_rdtsc.lo libtm_rdtsc.c
    /usr/bin/libtool --tag=CC   --mode=link gcc  -g -O0 -Wall  -I.  -o libtm_rdtsc.la libtm_rdtsc.lo -lrt -rpath `pwd`

    @# main program compile
    @# gcc -o util_main util_main.c -L./.libs/ -ltm_util -lrt -Wl,-rpath -Wl,/dir/.libs
    @# gcc -o util_main util_main.c -L./.libs/ -ltm_util -lrt -Wl,-rpath -Wl,/users/kyehwanl/Programming/time-measure/tm-library/.libs/



<Example.3>
===========
- Extracted from Net-Patricia's Makefile

(Makefile)
    all:
  (1)   /usr/bin/libtool --tag=CC   --mode=compile gcc -DHAVE_IPV6 -I. -g -O0 -Wall  -c -o patricia.lo patricia.c
  (2)   /usr/bin/libtool --tag=CC   --mode=link gcc  -g -O0 -Wall  -I. -o libpatricia.la patricia.lo -rpath `pwd`
  (3)   /usr/bin/libtool --tag=CC   --mode=install cp libpatricia.la `pwd`
  (4)   /usr/bin/libtool --tag=CC   --finish  `pwd`


(Building Result)
    -(1)-
    /usr/bin/libtool --tag=CC   --mode=compile gcc -DHAVE_IPV6 -I. -g -O0 -Wall  -c -o patricia.lo patricia.c
    libtool: compile:  gcc -DHAVE_IPV6 -I. -g -O0 -Wall -c patricia.c  -fPIC -DPIC -o .libs/patricia.o
    libtool: compile:  gcc -DHAVE_IPV6 -I. -g -O0 -Wall -c patricia.c -o patricia.o >/dev/null 2>&1

    -(2)-
    /usr/bin/libtool --tag=CC   --mode=link gcc  -g -O0 -Wall  -I. -o libpatricia.la patricia.lo -rpath `pwd`
    libtool: link: gcc -shared  -fPIC -DPIC  .libs/patricia.o    -O0   -Wl,-soname -Wl,libpatricia.so.0 -o .libs/libpatricia.so.0.0.0
    libtool: link: (cd ".libs" && rm -f "libpatricia.so.0" && ln -s "libpatricia.so.0.0.0" "libpatricia.so.0")
    libtool: link: (cd ".libs" && rm -f "libpatricia.so" && ln -s "libpatricia.so.0.0.0" "libpatricia.so")
    libtool: link: ar cru .libs/libpatricia.a  patricia.o
    libtool: link: ranlib .libs/libpatricia.a
    libtool: link: ( cd ".libs" && rm -f "libpatricia.la" && ln -s "../libpatricia.la" "libpatricia.la" )

    -(3)-
    /usr/bin/libtool --tag=CC   --mode=install cp libpatricia.la `pwd`
    libtool: install: cp .libs/libpatricia.so.0.0.0 /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia/libpatricia.so.0.0.0
    libtool: install: (cd /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia && { ln -s -f libpatricia.so.0.0.0 libpatricia.so.0 || { rm -f libpatricia.so.0 && ln -s libpatricia.so.0.0.0 libpatricia.so.0; }; })
    libtool: install: (cd /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia && { ln -s -f libpatricia.so.0.0.0 libpatricia.so || { rm -f libpatricia.so && ln -s libpatricia.so.0.0.0 libpatricia.so; }; })
    libtool: install: cp .libs/libpatricia.lai /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia/libpatricia.la
    libtool: install: cp .libs/libpatricia.a /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia/libpatricia.a
    libtool: install: chmod 644 /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia/libpatricia.a
    libtool: install: ranlib /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia/libpatricia.a
    libtool: finish: PATH="/bin/:/sbin" ldconfig -n /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia
    ----------------------------------------------------------------------
    Libraries have been installed in:
       /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia

    If you ever happen to want to link against installed libraries
    in a given directory, LIBDIR, you must either use libtool, and
    specify the full pathname of the library, or use the `-LLIBDIR'
    flag during linking and do at least one of the following:
       - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
         during execution
       - add LIBDIR to the `LD_RUN_PATH' environment variable
         during linking
       - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
       - have your system administrator add LIBDIR to `/etc/ld.so.conf'

    See any operating system documentation about shared libraries for
    more information, such as the ld(1) and ld.so(8) manual pages.
    ----------------------------------------------------------------------

    -(4)-
    /usr/bin/libtool --tag=CC   --finish  `pwd`
    libtool: finish: PATH="/bin/:/sbin" ldconfig -n /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia
    ----------------------------------------------------------------------
    Libraries have been installed in:
       /opt/project/srx_test1/test_install/Net-Patricia-1.15/libpatricia

    If you ever happen to want to link against installed libraries
    in a given directory, LIBDIR, you must either use libtool, and
    specify the full pathname of the library, or use the `-LLIBDIR'
    flag during linking and do at least one of the following:
       - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
         during execution
       - add LIBDIR to the `LD_RUN_PATH' environment variable
         during linking
       - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
       - have your system administrator add LIBDIR to `/etc/ld.so.conf'

    See any operating system documentation about shared libraries for
    more information, such as the ld(1) and ld.so(8) manual pages.
    ----------------------------------------------------------------------





Making Shared Library (using gcc)
================================= 
  (Regular Form)
  gcc -fPIC -c file1.c file2.c
  gcc -shared -Wl, -soname, libmy.so.0 -o libmy.so.0.0.0 file1.o file2.o


  (Short Form)
  gcc -fPIC -shared -o libmy.so file1.c file2.c



 1. 라이브러리를 만들었으면 libmy.so.0.0.0을 이용해 컴파일 되는 실행파일들을 링크할때 링크(collect2)가 
 찾을 수 있게 libmy.so.0.0.0 파일의 심볼릭 링크 파일인 libmy.so 만들기

 
 2. 이후 이렇게 컴파일된 실행 파일이 실행될때 동적 링크 (/lib/ld-linux.so.2)가 soname으로 찾을 수 있게 
 soname을 파일명으로 하는 libmy.so.0.0.0 파일의 심볼릭 링크가 필요

  * $ ln -s libmy.so.0.0.0 libmy.so       # gcc 링크를 위한 파일 (링크할때) 
  * $ ln -s libmy.so.0.0.0 libmy.so.0     # 동적 링크를 위한 파일 (실행될때) -

 3. 동적링크(/lib/ld-linux.so.2)가 찾을 수 있게 libmy.so.0.0.0 파일이 있는 디렉토리를 설정
  * /etc/ld.so.conf 파일을 열어 libmy.so.0.0.0이 있는 디렉토리 추가


 4. 실제 동적 로더가 읽어들이는 /etc/ld.so.cache 파일을 새로 만든다
  * $ ldconfig
     -- 동적 로더는 수행될때 /etc/ld.so.preload, /etc/ld.so.cache 파일순으로 파일을 읽어 어떤 
     디렉토리에 공유 라이브러리가 있는지 알아냄
     -- 기본적으로 /usr/lib 찾지만, 만약 다른 디렉토리에 공유 라이브러리가 있다면 
     /etc/ld.so.conf파일에 디렉토리를 추가하고 ldconfig 명령으로 /etc/ld.so.cache 파일을 갱신해야 한다 
     ( /usr/lib or /lib 에 복사하면 안해도 됨)
                
<주의> 많이 범하는 오류 → ldconfig는 동적링크(ld-linux.so.2)가 공유 라이브러리 정보를 위해 db를 생성하는 것
    즉, 링커(ld , or collect2)는 ldconfig로 생성되는 cache정보와는 아무관련없음!!
    따라서 configure.ac 에서 자체적으로 ld를 이용하는 AC_SEARCH_LIBS()매크로를 이용하여 lib를 검색하게할때
    사용자가 지정한 디렉토리를 ldconfig로 cache db를 갱신해줘도 ld의 기본탐색 디렉토리
    (/usr/lib/gcc/i386-redhat-linux/lib,  /usr/local/lib,  /lib,  /usr/lib) 만 찾게되어서 AC_SEARCH_LIBS 
    매크로는 결국 내부적으로 “ld: cannot find -l<library>”에러로 인해 실패하게 된다.

    ⇒ 즉, 요약하면 ldconfig는 링커(collect2, ld)를 위한 것이 아니라 동적로더(dynamic loader, ld-linux.so.2)를 
      위한 설정 ld를 위한 설정은 LDFLAGS에서 -L<path> 추가 해야된다. → AC_SEARCH_LIBS - tweak 참조





[libtool] libtool 이용하여 컴파일 및 링킹
=========================================

$ libtool --mode=compile gcc  -g -c hello.c
libtool: compile:  gcc -g -c hello.c  -fPIC -DPIC -o .libs/hello.o
libtool: compile:  gcc -g -c hello.c -o hello.o >/dev/null 2>&1

$ ll
total 24K
-rw-r--r-- 1 kyehwanl BGP-SRx   61 Jul  1 17:11 hell.c
-rwxr-xr-x 1 kyehwanl BGP-SRx 5.4K Jul  1 17:11 hell.old*
-rw-r--r-- 1 kyehwanl BGP-SRx   62 Jul  1 17:14 hello.c
-rw-r--r-- 1 kyehwanl BGP-SRx 2.2K Jul  1 17:18 hello.o
-rw-r--r-- 1 kyehwanl BGP-SRx  265 Jul  1 17:18 hello.lo

$ vim hello.lo
# hello.lo - a libtool object file          
# Generated by libtool (GNU libtool) 2.4
#
# Please DO NOT delete this file! 
# It is necessary for linking the library.
                                          
# Name of the PIC object.                
pic_object='.libs/hello.o' 
                           
# Name of the non-PIC object
non_pic_object='hello.o'      


$ libtool --mode=link gcc -o libhello.la hello.lo                                        
libtool: link: ar cru .libs/libhello.a .libs/hello.o 
libtool: link: ranlib .libs/libhello.a       
libtool: link: ( cd ".libs" && rm -f "libhello.la" && ln -s "../libhello.la" "libhello.la" )

$ ll .libs/                                                                              
total 8.0K 
-rw-r--r-- 1 kyehwanl BGP-SRx 2.5K Jul  1 17:18 hello.o
lrwxrwxrwx 1 kyehwanl BGP-SRx   14 Jul  1 17:21 libhello.la -> ../libhello.la
-rw-r--r-- 1 kyehwanl BGP-SRx 2.6K Jul  1 17:21 libhello.a

$ vim libhello.la

# libhello.la - a libtool library file                                       
# Generated by libtool (GNU libtool) 2.4                                     
#                                                                            
# Please DO NOT delete this file!                                            
# It is necessary for linking the library.                                   
                                                                             
# The name that we can dlopen(3).                                            
dlname=''                                                                    
                                                                             
# Names of this library.                                                     
library_names=''                                                             
                                                                             
# The name of the static archive.                                            
old_library='libhello.a'                                                     
                                                                             
# Linker flags that can not go in dependency_libs.                           
inherited_linker_flags=''                                                    
                                                                             
# Libraries that this one depends upon.                                      
dependency_libs=''                                                           
                                                                             
# Names of additional weak libraries provided by this library                
weak_library_names=''                                                        
                                                                             
# Version information for libhello.                                          
current=                                                                     
age=                                                                         
revision=                                                                    
                                                                             
# Is this an already installed library?                                      
installed=no                                                                 
                                                                             
# Should we warn about portability when linking against -modules?            
shouldnotlink=no                                                             
                                                                             
# Files to dlopen/dlpreopen                                                  
dlopen=''                                                                    
dlpreopen=''                                                                 
                                                                             
# Directory that this library needs to be installed in:                      
libdir=''



$ libtool --mode=link gcc -o libhello.la hello.lo  -rpath $PWD/test_install               
libtool: link: rm -fr  .libs/libhello.a .libs/libhello.la                     
libtool: link: gcc -shared  -fPIC -DPIC  .libs/hello.o      -Wl,-soname -Wl,libhello.so.0 -o .libs/libhello.so.0.0.0 
libtool: link: (cd ".libs" && rm -f "libhello.so.0" && ln -s "libhello.so.0.0.0" "libhello.so.0") 
libtool: link: (cd ".libs" && rm -f "libhello.so" && ln -s "libhello.so.0.0.0" "libhello.so")     
libtool: link: ar cru .libs/libhello.a  hello.o                                                   
libtool: link: ranlib .libs/libhello.a                                                            
libtool: link: ( cd ".libs" && rm -f "libhello.la" && ln -s "../libhello.la" "libhello.la" )

$ ll .libs/
total 20K
-rw-r--r-- 1 kyehwanl BGP-SRx 2.5K Jul  1 17:18 hello.o
-rwxr-xr-x 1 kyehwanl BGP-SRx 5.0K Jul  1 17:22 libhello.so.0.0.0*
lrwxrwxrwx 1 kyehwanl BGP-SRx   17 Jul  1 17:22 libhello.so.0 -> libhello.so.0.0.0*
lrwxrwxrwx 1 kyehwanl BGP-SRx   17 Jul  1 17:22 libhello.so -> libhello.so.0.0.0*
-rw-r--r-- 1 kyehwanl BGP-SRx  937 Jul  1 17:22 libhello.lai
lrwxrwxrwx 1 kyehwanl BGP-SRx   14 Jul  1 17:22 libhello.la -> ../libhello.la
-rw-r--r-- 1 kyehwanl BGP-SRx 2.3K Jul  1 17:22 libhello.a

$ vim libhello.la

# libhello.la - a libtool library file       
# Generated by libtool (GNU libtool) 2.4     
#                                            
# Please DO NOT delete this file!            
# It is necessary for linking the library.   
                                             
# The name that we can dlopen(3).            
dlname='libhello.so.0'                       
                                             
# Names of this library.                     
library_names='libhello.so.0.0.0 libhello.so.0 libhello.so' 
                                                            
# The name of the static archive.                           
old_library='libhello.a'                                    
                                                            
# Linker flags that can not go in dependency_libs.          
inherited_linker_flags=''                                   
                                                            
# Libraries that this one depends upon.                     
dependency_libs=''                                          
                                                            
# Names of additional weak libraries provided by this library
weak_library_names=''                                        
                                                             
# Version information for libhello.                          
current=0                                                    
age=0                                                        
revision=0                                                   
                                                             
# Is this an already installed library?                      
installed=no                                                 
                                                             
# Should we warn about portability when linking against -modules?
shouldnotlink=no                                                 
                                                                 
# Files to dlopen/dlpreopen                                      
dlopen=''                                                        
dlpreopen=''                                                     
                                                                 
# Directory that this library needs to be installed in:          
libdir='/tmp/aaaagF3L1KV/test_install'   



$ libtool --mode=compile gcc -c hell.c                                                   
libtool: compile:  gcc -c hell.c  -fPIC -DPIC -o .libs/hell.o    
libtool: compile:  gcc -c hell.c -o hell.o >/dev/null 2>&1     


$ libtool --mode=link gcc -o hell hell.o libhello.la                                     
libtool: link: gcc -o .libs/hell hell.o  ./.libs/libhello.so -Wl,-rpath -Wl,/tmp/aaaagF3L1KV/test_install 


$ ldd .libs/hell
        linux-gate.so.1 =>  (0xb77f5000)
        libhello.so.0 => not found
        libc.so.6 => /lib/libc.so.6 (0x4d205000)
        /lib/ld-linux.so.2 (0x4d1e3000)


→ libhello.so 를 링크해서 라이브러리는 만들었지만 인스톨하지 않아서 그 경로를 못찾고 있음

$ objdump -p .libs/hell

.libs/hell:     file format elf32-i386

Program Header:
    PHDR off    0x00000034 vaddr 0x08048034 paddr 0x08048034 align 2**2
         filesz 0x00000100 memsz 0x00000100 flags r-x
  INTERP off    0x00000134 vaddr 0x08048134 paddr 0x08048134 align 2**0
         filesz 0x00000013 memsz 0x00000013 flags r--
    LOAD off    0x00000000 vaddr 0x08048000 paddr 0x08048000 align 2**12
         filesz 0x00000688 memsz 0x00000688 flags r-x
    LOAD off    0x00000688 vaddr 0x08049688 paddr 0x08049688 align 2**12
         filesz 0x0000010c memsz 0x00000114 flags rw-
 ...

Dynamic Section:
  NEEDED               libhello.so.0
  NEEDED               libc.so.6
  RPATH                /tmp/aaaagF3L1KV/test_install






$ libtool --mode=finish -n test_install/
libtool: finish: PATH="/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/sbin" ldconfig -n test_install/
----------------------------------------------------------------------
Libraries have been installed in:
   test_install/

If you ever happen to want to link against installed libraries
in a given directory, LIBDIR, you must either use libtool, and
specify the full pathname of the library, or use the `-LLIBDIR'
flag during linking and do at least one of the following:
   - add LIBDIR to the `LD_LIBRARY_PATH' environment variable
     during execution
   - add LIBDIR to the `LD_RUN_PATH' environment variable
     during linking
   - use the `-Wl,-rpath -Wl,LIBDIR' linker flag
   - have your system administrator add LIBDIR to `/etc/ld.so.conf'

See any operating system documentation about shared libraries for
more information, such as the ld(1) and ld.so(8) manual pages.
----------------------------------------------------------------------
→ libtool 의 finish 모드로 필요한 경로( ./test_install) 를 library path에 추가할 수 있다

( ldconfig : -n     Only process directories specified on the command line.  Don't build cache.)













