
-------------------
Kubernetes Service 
-------------------


(https://kubernetes.io/docs/concepts/services-networking/service/)

1. Choosing your own IP address

  You can specify your own cluster IP address as part of a Service creation request. 
  To do this, set the .spec.clusterIP field. For example, 
  if you already have an existing DNS entry that you wish to reuse, or legacy systems 
  that are configured for a specific IP address and difficult to re-configure.

  The IP address that you choose must be a valid IPv4 or IPv6 address 
  from within the service-cluster-ip-range CIDR range that is configured for the API server. 
  If you try to create a Service with an invalid clusterIP address value, 
  the API server will return a 422 HTTP status code to indicate that there's a problem. 



2. Discovering Service

  2.1 Environment variables
  When a Pod is run on a Node, the kubelet adds a set of environment variables for each active Service. 
  It adds {SVCNAME}_SERVICE_HOST and {SVCNAME}_SERVICE_PORT variables, where the Service name is upper-cased 
  and dashes are converted to underscores. It also supports variables (see makeLinkVariables) that are 
  compatible with Docker Engine's "legacy container links" feature.

  For example, the Service redis-primary which exposes TCP port 6379 and has been allocated 
  cluster IP address 10.0.0.11, produces the following environment variables:

    REDIS_PRIMARY_SERVICE_HOST=10.0.0.11
    REDIS_PRIMARY_SERVICE_PORT=6379
    REDIS_PRIMARY_PORT=tcp://10.0.0.11:6379
    REDIS_PRIMARY_PORT_6379_TCP=tcp://10.0.0.11:6379
    REDIS_PRIMARY_PORT_6379_TCP_PROTO=tcp
    REDIS_PRIMARY_PORT_6379_TCP_PORT=6379
    REDIS_PRIMARY_PORT_6379_TCP_ADDR=10.0.0.11

  Note:
  When you have a Pod that needs to access a Service, and you are using the environment variable method 
  to publish the port and cluster IP to the client Pods, 
  you must create the Service before the client Pods come into existence.   <--- "BEFORE"
  Otherwise, those client Pods won't have their environment variables populated.

  If you only use DNS to discover the cluster IP for a Service, 
  you don't need to worry about this ordering issue.


    < in my test example, nginx-service-pod.yaml >
      apiVersion: v1
      kind: Pod
      metadata:
        name: nginx
        labels:
          app.kubernetes.io/name: proxy
      spec:
        containers:
        - name: nginx
          image: nginx:stable
          ports:
            - containerPort: 80
              name: http-web-svc
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: nginx-service
      spec:
        selector:
          app.kubernetes.io/name: proxy
        ports:
        - name: name-of-service-port
          protocol: TCP
          port: 80
          targetPort: http-web-svc


      vagrant@sakuramomo:~$ kubectl get po
      NAME                              READY   STATUS    RESTARTS   AGE
      nginx                             1/1     Running   0          47h
      ...

      vagrant@sakuramomo:~$ kubectl exec -it nginx -- env
      KUBERNETES_SERVICE_PORT_HTTPS=443
      KUBERNETES_SERVICE_PORT=443
      NGINX_SERVICE_PORT_80_TCP_ADDR=10.101.18.178
      HOSTNAME=nginx
      NGINX_SERVICE_PORT_80_TCP=tcp://10.101.18.178:80
      NGINX_SERVICE_SERVICE_HOST=10.101.18.178
      PWD=/
      NGINX_SERVICE_PORT_80_TCP_PROTO=tcp
      PKG_RELEASE=1~bullseye
      HOME=/root
      NGINX_SERVICE_PORT_80_TCP_PORT=80
      KUBERNETES_PORT_443_TCP=tcp://10.96.0.1:443
      NGINX_SERVICE_SERVICE_PORT=80
      NGINX_SERVICE_PORT=tcp://10.101.18.178:80
      NJS_VERSION=0.7.6
      TERM=xterm
      SHLVL=1
      KUBERNETES_PORT_443_TCP_PROTO=tcp
      KUBERNETES_PORT_443_TCP_ADDR=10.96.0.1
      NGINX_SERVICE_SERVICE_PORT_NAME_OF_SERVICE_PORT=80
      KUBERNETES_SERVICE_HOST=10.96.0.1
      KUBERNETES_PORT=tcp://10.96.0.1:443
      KUBERNETES_PORT_443_TCP_PORT=443
      PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      NGINX_VERSION=1.22.0
      _=/usr/bin/env


      vagrant@sakuramomo:~$ kubectl get svc -o wide
      NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE   SELECTOR
      kubernetes        ClusterIP   10.96.0.1       <none>        443/TCP    23d   <none>
      nginx-service     ClusterIP   10.101.18.178   <none>        80/TCP     47h   app.kubernetes.io/name=proxy



    --> NGINX_SERVICE_SERVICE_HOST=10.101.18.178 can be found in environment variables in forms of {SVCNAME}_SERVICE_HOST,
        and this is the same with cluster ip.





3. DNS name refer to the service

  Within the containers/POD, you can use a dns name which refers to the service. 
  Basically, the file /etc/hosts is populated with the kube-dns edress. You can just use it as like:

  <svc-name>.<namespace>.svc.cluster.local








