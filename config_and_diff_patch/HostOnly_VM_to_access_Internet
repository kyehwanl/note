

Host Only VMs & Internet
========================
(https://unix.stackexchange.com/questions/383791/virtualbox-host-only-with-internet)

- Objectives:
    To make Host Only vm instances access Internet through Host or other VM which can forward traffic


----------------------
1. 3 VMs with Vagrant
----------------------

	<Vagrantfile>

	VM1 = "sdcore"
	VM2 = "router"
	VM3 = "ran"

	HostName1 = "sdcore"
	HostName2 = "router"
	HostName3 = "ran"

	IP1  = "192.168.10.10"
	IP20 = "192.168.10.100"
	IP21 = "192.168.20.100"
	IP3  = "192.168.20.10"

	servers = [
	  { :hostname => HostName1, :ip => IP1, :memory => "12288", :vm => VM1, :cpu => 8},
	  { :hostname => HostName3, :ip => IP3, :memory => "12288", :vm => VM3, :cpu => 4 },
	]
	routers = [
	  { :hostname => HostName2, :ip => IP20, :ip2 => IP21, :memory => "12288", :vm => VM2, :cpu => 8 },
	]

	$script = <<-SCRIPT
	apt update
	apt install -y make vifm bash-completion git
	SCRIPT

	$script_user = <<-SCRIPT_USER
	git clone https://github.com/kyehwanl/config_ready_to_use.git
	config_ready_to_use/vagrant_vim_env_config.sh
	SCRIPT_USER

	Vagrant.configure("2") do |config|
	  config.vm.box = "bento/ubuntu-22.04"
	  servers.each do |conf|
		config.vm.define conf[:vm] do |node|
		  node.vm.hostname = conf[:hostname]
		  node.vm.network "private_network", ip: conf[:ip]
		  node.vm.synced_folder ".", "/vagrant"
		  node.vm.provider "virtualbox" do |vb|
			vb.memory = conf[:memory]
			vb.cpus = conf[:cpu]
		  end
		  node.vm.provision "shell", inline: $script, privileged: true
		  node.vm.provision "shell", inline: $script_user, privileged: false
		end
	  end

	  routers.each do |conf|
		config.vm.define conf[:vm] do |node|
		  node.vm.hostname = conf[:hostname]
		  node.vm.network "private_network", ip: conf[:ip]
		  node.vm.network "private_network", ip: conf[:ip2]
		  node.vm.synced_folder ".", "/vagrant"
		  node.vm.provider "virtualbox" do |vb|
			vb.memory = conf[:memory]
			vb.cpus = conf[:cpu]
		  end
		  node.vm.provision "shell", inline: $script, privileged: true
		  node.vm.provision "shell", inline: $script_user, privileged: false
		end
	  end
	end


  < sdcore vm >
  vagrant@sdcore:~$ ifconfig
  eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
		  inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
  eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
		  inet 192.168.10.10  netmask 255.255.255.0  broadcast 192.168.10.255


  < ran vm >
  vagrant@ran:~$ ifconfig
  eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
		  inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255
  eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
		  inet 192.168.20.10  netmask 255.255.255.0  broadcast 192.168.20.255



  < router vm >
  vagrant@router:~$ ifconfig                                                  
  eth0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500                  
		  inet 10.0.2.15  netmask 255.255.255.0  broadcast 10.0.2.255         
  eth1: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500                  
		  inet 192.168.10.100  netmask 255.255.255.0  broadcast 192.168.10.255
  eth2: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500                  
		  inet 192.168.20.100  netmask 255.255.255.0  broadcast 192.168.20.255



----------------------------
2. Configure Routing tables
----------------------------

(1) In sdcore and ran vm, delete default gateway & setup default through router vm
	
	sudo ip route delete default
	sudo ip route add default via 192.168.10.100


(2) Configure reachability between sdcore and ran VM instances

	sudo iptables -A FORWARD -d 192.168.20.10 -i eth1 -o eth2 -j ACCEPT
	sudo iptables -A FORWARD -d 192.168.10.10 -i eth2 -o eth1 -j ACCEPT
	sudo systemctl stop ufw


(3) Configure forwarding table for sdcore, ran to access Internet through Router vm

	sudo sysctl -w net.ipv4.ip_forward=1
	sudo iptables -A FORWARD -o eth0 -i eth1 -s 192.168.10.0/24 -m conntrack --ctstate NEW -j ACCEPT
	sudo iptables -A FORWARD -o eth0 -i eth2 -s 192.168.20.0/24 -m conntrack --ctstate NEW -j ACCEPT 
	sudo iptables -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	sudo iptables -A POSTROUTING -t nat -j MASQUERADE




(4) routing table 

	< sdcore >
	vagrant@sdcore:~$ route -n
	Kernel IP routing table
	Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
	0.0.0.0         192.168.10.100  0.0.0.0         UG    0      0        0 eth1
	0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 eth0
	10.0.2.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0
	10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 eth0
	10.0.2.3        0.0.0.0         255.255.255.255 UH    100    0        0 eth0
	192.168.10.0    0.0.0.0         255.255.255.0   U     0      0        0 eth1
	192.168.20.0    192.168.10.100  255.255.255.0   UG    0      0        0 eth1

	< ran >
	vagrant@ran:~$ route -n
	Kernel IP routing table
	Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
	0.0.0.0         192.168.20.100  0.0.0.0         UG    0      0        0 eth1
	0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 eth0
	10.0.2.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0
	10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 eth0
	10.0.2.3        0.0.0.0         255.255.255.255 UH    100    0        0 eth0
	192.168.10.0    192.168.20.100  255.255.255.0   UG    0      0        0 eth1
	192.168.20.0    0.0.0.0         255.255.255.0   U     0      0        0 eth1


	< router >
	vagrant@router:~$ route -n                                                   
	Kernel IP routing table                                                      
	Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
	0.0.0.0         10.0.2.2        0.0.0.0         UG    100    0        0 eth0 
	10.0.2.0        0.0.0.0         255.255.255.0   U     100    0        0 eth0 
	10.0.2.2        0.0.0.0         255.255.255.255 UH    100    0        0 eth0 
	10.0.2.3        0.0.0.0         255.255.255.255 UH    100    0        0 eth0 
	192.168.10.0    0.0.0.0         255.255.255.0   U     0      0        0 eth1 
	192.168.20.0    0.0.0.0         255.255.255.0   U     0      0        0 eth2 



(5) iptable in router vm (Forwarding rule)

	vagrant@router:~$ sudo iptables --list                                                    
	Chain INPUT (policy ACCEPT)                                                               
	target     prot opt source               destination                                      
																							  
	Chain FORWARD (policy ACCEPT)                                                             
	target     prot opt source               destination                                      
	ACCEPT     all  --  anywhere             192.168.20.10                                    
	ACCEPT     all  --  anywhere             192.168.10.10                                    
	ACCEPT     all  --  192.168.10.0/24      anywhere             ctstate NEW                 
	ACCEPT     all  --  anywhere             anywhere             ctstate RELATED,ESTABLISHED 
	ACCEPT     all  --  192.168.20.0/24      anywhere             ctstate NEW                 
																							  
	Chain OUTPUT (policy ACCEPT)                                                              
	target     prot opt source               destination                                      




(6) tranceroute (from sdcore vm through router vm to Internet, to ran vm)

  vagrant@sdcore:~$ traceroute 8.8.8.8
  traceroute to 8.8.8.8 (8.8.8.8), 30 hops max, 60 byte packets
   1  _gateway (192.168.10.100)  0.436 ms  0.356 ms  0.462 ms
   2  _gateway (10.0.2.2)  1.014 ms  0.957 ms  0.907 ms
   3  * * *
   4  129.6.9.254 (129.6.9.254)  1.550 ms  1.499 ms  1.629 ms
   5  129.6.91.1 (129.6.91.1)  3.364 ms  3.690 ms  3.640 ms
   6  129.6.92.253 (129.6.92.253)  3.956 ms  3.727 ms  4.592 ms
   7  igw225.nist.gov (129.6.5.254)  6.230 ms  3.403 ms  3.341 ms
   8  129.6.14.2 (129.6.14.2)  46.988 ms  46.715 ms  46.883 ms
   9  et-2-0-2.666.brtr.wash.nwave.noaa.gov (137.75.68.3)  5.579 ms  3.852 ms  3.792 ms
  10  et-5-3-0-20.mcln-core.maxgigapop.net (206.196.177.196)  6.541 ms  6.663 ms  6.571 ms
  11  ae0.clpk-core.maxgigapop.net (206.196.178.81)  8.146 ms *  6.762 ms
  12  mbp-t1-1720.maxgigapop.net (206.196.177.109)  5.537 ms  42.590 ms 206.196.177.15 (206.196.177.15)  42.536 ms
  13  * 108.170.246.33 (108.170.246.33)  40.139 ms *
  14  dns.google (8.8.8.8)  39.728 ms 142.250.232.79 (142.250.232.79)  38.159 ms dns.google (8.8.8.8)  37.907 ms



  vagrant@sdcore:~$ traceroute 192.168.20.10
  traceroute to 192.168.20.10 (192.168.20.10), 30 hops max, 60 byte packets
   1  _gateway (192.168.10.100)  0.666 ms  0.587 ms  0.384 ms
   2  192.168.20.10 (192.168.20.10)  1.026 ms  1.167 ms  0.829 ms

















