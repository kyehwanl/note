

 Local Registry with self-signed Certificate
 ===========================================


 (0) pre-requisite 

    "Failed to tls handshake with <IP addr>"
    "x509: cannot validate certificate for <IP addr> because it doesn't contain any IP SANs"

     --> (Solution)
        - Edit your /etc/ssl/openssl.cnf on the host 
        - on Centos /etc/pki/tls/openssl.cnf
          add subjectAltName = IP:192.168.2.107 in [v3_ca] section

 (1) Create a Self Signed Certificate 

   @vmware-011:# mkdir registry_certs  <-- (located in vmware-011:/opt/project/docker_test)
   @vmware-011:$ openssl req -newkey rsa:4096 -nodes -sha256 \
                -keyout registry_certs/domain.key -x509 -days 3650 \
                -out registry_certs/domain.cert

    Here I created a x509 certificate and a private RSA key. 
    The Common Name here is important as this is the server host name

          [root@vmware-011 registry_certs]# openssl req -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 3650 -out domain.cert
          Generating a 4096 bit RSA private key
          ................................................................................++
          .................................................................................++
          writing new private key to 'domain.key'
          -----
          You are about to be asked to enter information that will be incorporated
          into your certificate request.
          What you are about to enter is what is called a Distinguished Name or a DN.
          There are quite a few fields but you can leave some blank
          For some fields there will be a default value,
          If you enter '.', the field will be left blank.
          -----
          Country Name (2 letter code) [XX]:US
          State or Province Name (full name) []:
          Locality Name (eg, city) [Default City]:
          Organization Name (eg, company) [Default Company Ltd]:
          Organizational Unit Name (eg, section) []:
          Common Name (eg, your name or your server's hostname) []:10.0.50.11
          Email Address []:

    ^^^^^^^^
    < 중요>
    ^^^^^^^^
    If domain.cert doesn't have SAN (Subject Alt Name: IP address), 
    later docker login, docker push, pull WON'T WORK !!!
    - Error message: 
      --  Service Unavailable
      --  tls failed to verify certificate x509 cannot validate certificat because it doesn't contain any IP SANs
    

    So, MUST check SAN in certs

    - Two ways to make SAN

    -- 1. /etc/ssl/openss.cnf, fill SAN info
    -- 2. use CSR (example below), openssl command with -config option
        openssl req -config tls.csr -newkey rsa:4096 -nodes -sha256 -keyout domain.key -x509 -days 3650 -out domain.cert
    
        < tls.csr >
        [req]
        distinguished_name = private_registry_cert_req
        x509_extensions = v3_req
        prompt = no         

        [private_registry_cert_req] 
        OU = NIST
                                                        
        [v3_req]
        keyUsage = keyEncipherment, dataEncipherment
        extendedKeyUsage = serverAuth
        subjectAltName = @alt_names

        [alt_names]
        IP = 129.6.142.11



    - Verify with docker login, pull, push or curl -k http://<host>:<port>/v2/_catalog

        (example)
        # docker login 129.6.142.11:5000
        Username: kyehwanl     
        Password:
        WARNING! Your password will be stored unencrypted in /root/.docker/config.json.    
        Configure a credential helper to remove this warning. See
        https://docs.docker.com/engine/reference/commandline/login/#credential-stores  

        Login Succeeded



    


 (2) Run the Private Docker Registry with TLS
     (using "--restart=always" for continuously running)

    @vmware-011:$ docker run -d -p 5000:5000 \
               -v $(pwd)/registry_certs:/certs \
               -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.cert \
               -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \
               --restart=always --name registry registry:2

      [root@vmware-011 registry_certs]# docker run -d -p 5000:5000  -v $(pwd):/certs  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.cert  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key --restart=always --name registry registry:2
      989a2dfaa42c80e3b2a413f83d8ad6f160e0e43d06e906933fee589ffb89b8f9

    (c.f) here $(pwd) == /opt/project/docker_test/registry_certs



  (*) To Read certs and key
    $ openssl x509 -in domain.cert -text -noout 
    $ openssl rsa -in domain.key -text




 (3) Try to upload to the local repository -- Possible Errors

    A.
      [root@vmware-011 registry_certs]# docker push 10.0.50.11:5000/quagga
      The push refers to repository [10.0.50.11:5000/quagga]
      Get https://10.0.50.11:5000/v2/: x509: certificate signed by unknown authority

    --> error: unknown authority
                (this means: the server where client wants to push was not recognized by the client's authentication)

    --> solution: 
        [root@vmware-011 registry_certs]# cp domain.cert /etc/docker/certs.d/10.0.50.11\:5000/ca.crt 
        [root@vmware-011 registry_certs]# service docker reload (or restart)
        Redirecting to /bin/systemctl reload docker.service

        [root@vmware-011 registry_certs]# docker push 10.0.50.11:5000/quagga
        The push refers to repository [10.0.50.11:5000/quagga]
        199520a594e2: Pushed
        c81bda8711cc: Pushed
        8568818b1f7f: Pushed
        latest: digest: sha256:ca6e4c44046dfb74244e2801667a10fe1a70547f7773820192bede1e974497a9 size: 947

    --> Success !!



    < login to docker local private repository >

    docker login

    --> The login process creates or updates a config.json file that holds an authorization token
    cat ~/.docker/config.json


    - copy domain.cert and domain.key into /etc/docker/certs.d/10.0.50.11:5000/
    - docker loing 10.0.50.11:5000
    - id: kyehwanl pw: Lee at my #

    root@5g1-comp1:/etc/docker/certs.d/10.0.50.11:5000# docker login 10.0.50.11:5000
    Username: kyehwanl
    Password:
    WARNING! Your password will be stored unencrypted in /root/.docker/config.json.
    Configure a credential helper to remove this warning. See
    https://docs.docker.com/engine/reference/commandline/login/#credentials-store

    Login Succeeded




    B. 
      [root@vmware-011 go_temp_test2]# docker push 10.0.50.11:5000/srx_grpc
      Using default tag: latest
      The push refers to repository [10.0.50.11:5000/srx_grpc]
      Get https://10.0.50.11:5000/v2/: x509: certificate has expired or is not yet valid


      --> Error: Expired certs

      (Solution)

        (i) go to the mounted directory for key and certs, in this case, vmware-011:/opt/project/docker_test 
            Also found by using 'docker inspect registry' and try to seek 

              "HostConfig": {                                         
                  "Binds": [                                          
                      "/opt/project/docker_test/registry_certs:/certs"
                ...
              "Mounts": [                                                  
                  {                                                        
                      "Type": "bind",                                      
                      "Source": "/opt/project/docker_test/registry_certs",
                      "Destination": "/certs",                             


        (ii) Generate key and cert as new
            (check expiration with the following command)
                $ openssl x509 -in domain.cert -text -noout 

            [root@vmware-011 docker_test]# openssl req -newkey rsa:4096 -nodes -sha256 \
            -keyout registry_certs/domain.key -x509 -days 999 -out registry_certs/domain.cert



        (iii) Restart 'registry' docker container
        
            # docker restart registry 


        (iv) Do not forget for the client to copy the new certs into its docker certs directory 
            (/etc/docker/certs.d/10.0.50.11:5000/) named with ca.cert or ca.crt
            Otherwise, it will occurr #A error (certificate signed by unknown authority)



 (4) push / pull from Remote host to the Local Registry 
    using vmware-005 to access vmware-011's docker registry

    <UPDATE> latest version v19.03.3, Note that CA certificates should use the extension .crt

    * copy vmware011's certificate to vmware005 (located in /etc/docker/certs.d/10.0.50.11\:5000/ca.cert or domain.cert on vm011)
          [root@vmware-011 registry_certs]# scp domain.cert kyehwanl@vmware-005:/tmp
          kyehwanl@vmware-005's password:
          domain.cert                       100% 1992     2.0MB/s   00:00

    * place the certificate into the docker's certs directory
          (the client,vm-005, needs to have a server's certs which belongs to the server,vm-011, 
           where the client wants to push images)

          [root@vmware-005 registry_certs]# cp /tmp/domain.cert /etc/docker/certs.d/10.0.50.11\:5000/ca.crt
          [root@vmware-005 registry_certs]# ll /etc/docker/certs.d/10.0.50.11\:5000/
          total 4
          -rw-r----- 1 root root 1968 Mar  9 14:35 ca.crt

          (if there is no directory structure under /etc/docker/, then mkdir -p "/etc/docker/certs.d/10.0.50.11:5000")

    * docker service reload
          [root@vmware-005 10.0.50.11:5000]# service docker reload
          Redirecting to /bin/systemctl reload docker.service]


    * push / pull test

     A.
          [root@vmware-005 10.0.50.11:5000]# docker images
          REPOSITORY                          TAG                 IMAGE ID            CREATED             SIZE
          10.0.50.11:5000/centos              latest              2d194b392dd1        3 days ago          195.4 MB
          docker.io/centos                    latest              2d194b392dd1        3 days ago          195.4 MB
          docker.io/kyehwanl/quagga-centos    latest              0fbd2a6d1dcd        4 days ago          386.6 MB
          10.0.50.11:5000/registry-kyehwanl   latest              d1fd7d86a825        8 weeks ago         33.26 MB
          docker.io/registry                  latest              d1fd7d86a825        8 weeks ago         33.26 MB

          [root@vmware-005 10.0.50.11:5000]# docker tag docker.io/registry 10.0.50.11:5000/registry-kyehwanl

          [root@vmware-005 10.0.50.11:5000]# docker push 10.0.50.11:5000/registry-kyehwanl
          The push refers to a repository [10.0.50.11:5000/registry-kyehwanl]
          9113493eaae1: Pushed 
          621c2399d41a: Pushed 
          59e80739ed3f: Pushed 
          febf19f93653: Pushed 
          e53f74215d12: Pushed 
          latest: digest: sha256:feb40d14cd33e646b9985e2d6754ed66616fedb840226c4d917ef53d616dcd6c size: 1364

     B. 
          [root@vmware-005 10.0.50.11:5000]# docker pull pierky/bird
          Using default tag: latest
          Trying to pull repository docker.io/pierky/bird ... 
          latest: Pulling from docker.io/pierky/bird
          38e0dd992b37: Pull complete 
          c19aa64b5b0b: Pull complete 
          85088e1be286: Pull complete 
          0f9d17c756a5: Pull complete 
          35697d055961: Pull complete 
          7e87772c442b: Pull complete 
          Digest: sha256:a9105e5ecd228ce9039d725dd18956b1736bd89a386b6efb271150969a7a57c8

          [root@vmware-005 10.0.50.11:5000]# docker images
          REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
          docker.io/pierky/bird    latest              ee9cda8dcf7d        12 months ago       356 MB

          [root@vmware-005 10.0.50.11:5000]# docker tag docker.io/pierky/bird 10.0.50.11:5000/bird
          [root@vmware-005 10.0.50.11:5000]# docker images
          REPOSITORY               TAG                 IMAGE ID            CREATED             SIZE
          10.0.50.11:5000/quagga   latest              246c2494b102        8 days ago          104.4 MB
          docker.io/registry       latest              d1fd7d86a825        8 weeks ago         33.26 MB
          10.0.50.11:5000/bird     latest              ee9cda8dcf7d        12 months ago       356 MB
          docker.io/pierky/bird    latest              ee9cda8dcf7d        12 months ago       356 MB

          [root@vmware-005 10.0.50.11:5000]# docker push 10.0.50.11:5000/bird
          The push refers to a repository [10.0.50.11:5000/bird]
          4225f6627ecf: Pushed 
          54aef48884a7: Pushed 
          6686dd0a1482: Pushed 
          031d51debde8: Pushed 
          1c33be632441: Pushed 
          a5a5bc81d739: Pushed 
          latest: digest: sha256:e2b34f7e8169f9a9c9bdc692fbf3b39e3fac1c8884952102c73965fc48923a96 size: 1579


    You can verify you remote registry also via web browser:
    https://yourserver.com:5000/v2/_catalog

            [root@vmware-005 10.0.50.11:5000]# curl -k https://10.0.50.11:5000/v2/_catalog
            {"repositories":["bird","centos","quagga","registry-kyehwanl"]}

    
     C. Only a new layered image can be uploaded. Otherwise it would say, "already exist"

          [root@vmware-011 registry_certs]# curl -k https://10.0.50.11:5000/v2/_catalog
          {"repositories":["bird","centos","quagga","registry-kyehwanl"]}

          [root@vmware-011 registry_certs]# docker push localhost:5000/quagga-test
          The push refers to repository [localhost:5000/quagga-test]
          72976bf77c4a: Pushed
          e15afa4858b6: Pushed
          latest: digest: sha256:887fc244608f9c90c4225eea5f398c0517d47210c89010409984f23fad7eb96e size: 741

          [root@vmware-011 registry_certs]# docker push 10.0.50.11:5000/quagga-test
          The push refers to repository [10.0.50.11:5000/quagga-test]
          72976bf77c4a: Layer already exists
          e15afa4858b6: Layer already exists
          latest: digest: sha256:887fc244608f9c90c4225eea5f398c0517d47210c89010409984f23fad7eb96e size: 741

          [root@vmware-011 registry_certs]# curl -k https://10.0.50.11:5000/v2/_catalog
          {"repositories":["bird","centos","quagga","quagga-test","registry-kyehwanl"]}

          [root@idac-server02 exabgp-3.4.13]# curl -k https://10.0.50.11:5000/v2/exabgp/tags/list
          {"name":"exabgp","tags":["latest","1.1"]}



     D. in case of uploading on the same server with the local registry server's location

          [root@vmware-011 tmp]# docker images
          REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
          srx                           latest              9d6bbfb1aea7        25 hours ago        466MB
          nginx                         latest              ae513a47849c        28 hours ago        109MB

          [root@vmware-011 tmp]# docker tag srx 10.0.50.11:5000/srx

          [root@vmware-011 tmp]# docker images
          REPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE
          10.0.50.11:5000/srx           latest              9d6bbfb1aea7        25 hours ago        466MB
          srx                           latest              9d6bbfb1aea7        25 hours ago        466MB
          nginx                         latest              ae513a47849c        28 hours ago        109MB

          [root@vmware-011 tmp]# docker push 10.0.50.11:5000/srx
          The push refers to repository [10.0.50.11:5000/srx]
          1b4cada97d70: Pushed
          e14a8e4df871: Pushed
          0d536ebae325: Pushed
          714faf85c221: Pushed
          50019d4cbf9c: Pushed
          77518d1e8354: Pushed
          8514db916773: Pushed
          7ac1e74b7659: Pushed
          397d0a0debde: Pushed
          b03095563b79: Pushed
          latest: digest: sha256:2efa6cb266bd473459264681f5ab16b5286a0d7feffb7007c0d0b0fc3920034d size: 2425


    ** then, vmware-005 can pull the same image from the vmware-011's registry
    <previous>
         [root@vmware-005 kyehwanl]# docker pull 10.0.50.11:5000/srx
         Using default tag: latest
         Trying to pull repository 10.0.50.11:5000/srx ...
         Pulling repository 10.0.50.11:5000/srx
         Error: image srx:latest not found

         [root@vmware-005 kyehwanl]# curl -k https://10.0.50.11:5000/v2/_catalog
         {"repositories":["bird","centos","centos-srx","quagga","quagga-test","registry-kyehwanl"]}

    <after>
         [root@vmware-005 kyehwanl]# curl -k https://10.0.50.11:5000/v2/_catalog
         {"repositories":["bird","centos","centos-srx","quagga","quagga-test","registry-kyehwanl","srx"]}

         [root@vmware-005 kyehwanl]# docker pull 10.0.50.11:5000/srx
         Using default tag: latest
         Trying to pull repository 10.0.50.11:5000/srx ...
         latest: Pulling from 10.0.50.11:5000/srx
         5e35d10a3eba: Already exists
         1fef669b9836: Pull complete
         f2d4b7968ad8: Pull complete
         5d6760f024df: Pull complete
         e852a6cfac93: Pull complete
         8315353d1a92: Pull complete
         e936c4f5c65b: Pull complete
         ba1032463fb0: Pull complete
         f58d0c9d1fae: Pull complete
         0cf0c2590e81: Pull complete
         Digest: sha256:2efa6cb266bd473459264681f5ab16b5286a0d7feffb7007c0d0b0fc3920034d
         Status: Downloaded newer image for 10.0.50.11:5000/srx:latest

         [root@vmware-005 kyehwanl]# docker images
         REPOSITORY                       TAG                 IMAGE ID            CREATED             SIZE
         10.0.50.11:5000/srx              latest              9d6bbfb1aea7        25 hours ago        466 MB
         docker.io/nginx                  <none>              ae513a47849c        27 hours ago        109 MB
         10.0.50.11:5000/centos-srx       latest              5829151cc690        8 days ago          402 MB




    * Then, where is the registry server's storage location ??
      --> TODO: solve the Question
    


 (5) Delete image <-- unsolved

    (https://stackoverflow.com/questions/25436742/how-to-delete-images-from-a-private-docker-registry)
    (https://azizunsal.github.io/blog/post/delete-images-from-private-docker-registry/)


      vmware.011-antd [2002]{.../src/srx_grpc_v6}-> curl -k https://10.0.50.11:5000/v2/_catalog
      {"repositories":["exabgpsec_src","gobgpsec_src","nist-bgp-srx","srx","srx-swarm","srx_grpc","srxcryptoapi_src","srxsuite_gl","srxsuite_src"]}
      vmware.011-antd [2003]{.../src/srx_grpc_v6}->
      vmware.011-antd [2003]{.../src/srx_grpc_v6}->
      vmware.011-antd [2003]{.../src/srx_grpc_v6}-> curl -k https://10.0.50.11:5000/v2/
      {}vmware.011-antd [2004]{.../src/srx_grpc_v6}-> curl -k https://10.0.50.11:5000/v2/srx_grpc/tags/list
      {"name":"srx_grpc","tags":["latest","6"]}
      vmware.011-antd [2005]{.../src/srx_grpc_v6}-> curl -k https://10.0.50.11:5000/v2/srx_grpc/manifests/6 -H 'Accept: application/vnd.docker.distribution.manifest.v2+json'
      {
         "schemaVersion": 2,
         "mediaType": "application/vnd.docker.distribution.manifest.v2+json",
         "config": {
            "mediaType": "application/vnd.docker.container.image.v1+json",
            "size": 2763,
            "digest": "sha256:776ee80efdcefa911e4923be797a6adf6e321df74853074f1d68326249bef48b"
         },
         "layers": [
            {
               "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
               "size": 76097157,
               "digest": "sha256:2d473b07cdd5f0912cd6f1a703352c82b512407db6b05b43f2553732b55df3bc"
            },
            {
               "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",
               "size": 922043712,
               "digest": "sha256:455fa044beb1a1e26b1efbfcae5dedb3d80a656e908df6cc0fd3a38833b10179"
            }
         ]
      }vmware.011-antd [2006]{.../src/srx_grpc_v6}-> curl -X DELETE http://10.0.50.11:5000/v2/srx_grpc/manifests/sha256:776ee80efdcefa911e4923be97a6adf6e321df74853074f1d68326249bef48b -v
      * About to connect() to 10.0.50.11 port 5000 (#0)
      *   Trying 10.0.50.11...
      * Connected to 10.0.50.11 (10.0.50.11) port 5000 (#0)
      > DELETE /v2/srx_grpc/manifests/sha256:776ee80efdcefa911e4923be797a6adf6e321df74853074f1d68326249bef48b HTTP/1.1
      > User-Agent: curl/7.29.0
      > Host: 10.0.50.11:5000
      > Accept: */*
      >

      * Connection #0 to host 10.0.50.11 left intact
      vmware.011-antd [2007]{.../src/srx_grpc_v6}->
      vmware.011-antd [2007]{.../src/srx_grpc_v6}->
      vmware.011-antd [2007]{.../src/srx_grpc_v6}-> curl -k https://10.0.50.11:5000/v2/_catalog
      {"repositories":["exabgpsec_src","gobgpsec_src","nist-bgp-srx","srx","srx-swarm","srx_grpc","srxcryptoapi_src","srxsuite_gl","srxsuite_src"]}


    --> Need to garbage collector run




---------------------------------
Kubernetes
 ctr containerd push with cert
---------------------------------

  - Copy all certs into /etc/ssl/certs
  root@5g1-comp1:/etc/docker/certs.d/10.0.50.11:5000# ll
  total 24K
  -rw-r----- 1 root     root     1.9K Jul 17 16:22 ca.crt
  -rw-r----- 1 root     root     1.9K Jul 17 16:50 10.0.50.11:5000.crt
  -rw-r----- 1 onfadmin onfadmin 3.2K Jul 17 17:09 domain.key
  -rw-r----- 1 root     root     3.2K Jul 17 17:09 10.0.50.11:5000.key
  -rw-r----- 1 root     root     1.9K Jul 17 17:18 10.0.50.11:5000.cert
  -rw-r----- 1 root     root     1.9K Jul 17 17:19 domain.cert

  root@5g1-comp1:/etc/docker/certs.d/10.0.50.11:5000# cp 10.0.50.11\:5000.* domain.* /etc/ssl/certs/


  - Push into docker registry
  root@5g1-comp1:~# ctr -n=k8s.io image push 10.0.50.11:5000/ctr-srx
  manifest-latest@sha256:93c5bf987336339584e537f1f314038eed9350a8bf619261c6333abb2e5a9a06: done           |++++++++++++++++++++++++++++++++++++++|
  config-sha256:bfdaf0ef555fb3906a60caa730934b94ad0f2f436f21c6a003eb4fdf42b2b79e:          done           |++++++++++++++++++++++++++++++++++++++|
  elapsed: 13.0s                                                                           total:  12.0 K (943.0 B/s)



  - Pull needs to have a full name including version, so, it is necessary to have a full name when making push
          Otherwise, kubectl couldn't find the image
  root@5g1-comp1:~/Download# ctr -n=k8s.io image tag 10.0.50.11:5000/ctr-srx 10.0.50.11:5000/ctr-srx:6
  10.0.50.11:5000/ctr-srx:6


  - push again with full name including version number
  root@5g1-comp1:~/Download# ctr -n=k8s.io image push 10.0.50.11:5000/ctr-srx:6
  manifest-latest@sha256:93c5bf987336339584e537f1f314038eed9350a8bf619261c6333abb2e5a9a06: done           |++++++++++++++++++++++++++++++++++++++|
  config-sha256:bfdaf0ef555fb3906a60caa730934b94ad0f2f436f21c6a003eb4fdf42b2b79e:          done           |++++++++++++++++++++++++++++++++++++++|
  elapsed: 0.3 s                                                                           total:  12.0 K (39.8 KiB/s)


  - check the registry catalog whether it is pushed even though it doesn't show version number
  root@5g1-comp1:~/Download# curl -k https://10.0.50.11:5000/v2/_catalog
  {"repositories":["ctr-srx","exabgpsec_src","gobgpsec_src","nist-bgp-srx","srx","srx-grpc","srx-swarm","srx_grpc","srxcryptoapi_src","srxsuite_gl","srxsuite_src"]}


  - Now pull again --> success !!
  root@5g1-comp1:~/Download# ctr -n=k8s.io image pull 10.0.50.11:5000/ctr-srx:6
  10.0.50.11:5000/ctr-srx:6:                                                        resolved       |++++++++++++++++++++++++++++++++++++++|
  manifest-sha256:93c5bf987336339584e537f1f314038eed9350a8bf619261c6333abb2e5a9a06: done           |++++++++++++++++++++++++++++++++++++++|
  config-sha256:bfdaf0ef555fb3906a60caa730934b94ad0f2f436f21c6a003eb4fdf42b2b79e:   done           |++++++++++++++++++++++++++++++++++++++|
  ...
  layer-sha256:723358298de86fa010e9f6236cff314fb0b8d0f51b468c61c3a84f6095c4c642:    done           |++++++++++++++++++++++++++++++++++++++|
  elapsed: 0.1 s                                                                    total:   0.0 B (0.0 B/s)
  unpacking linux/amd64 sha256:93c5bf987336339584e537f1f314038eed9350a8bf619261c6333abb2e5a9a06...
  done: 25.101069ms




-----------------------------------
 kubectl deploy certificate error
-----------------------------------

<issue>
Kubernetes pull still has "x509: certificate signed by unknown authority" error  --> Solved 2.(1),(2)

so followed all instructions here.
(https://stackoverflow.com/questions/72102770/x509-certificate-signed-by-unknown-authority-possibly-because-of-crypto-rsa)

1.  vim /etc/docker/daemon.json I have added:  <-- not sure it's needed

{ "insecure-registries":["my.local.registry:5000"] }


2. cert copy

(1) bring registry certs into /usr/local/share/ca-certificates/ca.crt

        scp 10.0.50.11:<cert> /etc/docker/cert.d/10.0.50.11:5000/domain.cert
        mv /usr/local/share/ca-certificates/ca.crt /usr/local/share/ca-certificates/ca.crt.orig
        cp /etc/docker/cert.d/10.0.50.11:5000/domain.cert /usr/local/share/ca-certificates/ca.crt

        -- copy cert to /etc/ssl/certs
        root@5g1-comp1:/etc/docker/certs.d/10.0.50.11:5000# cp 10.0.50.11\:5000.* domain.* /etc/ssl/certs/
        root@5g1-comp1:~/Download# ls /etc/docker/certs.d/10.0.50.11:5000
        10.0.50.11:5000.cert  10.0.50.11:5000.crt  10.0.50.11:5000.key  ca.crt  domain.cert  domain.key

    --> TODO: need to know what is the right place where the certs should be


    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    --> Solved !!! (updated. 2024.07.18)
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        Only copy a cert file, domain.crt(not cert), into /etc/ssl/certs 
        and then, it's enough restart following services
          update-ca-certificates
          service docker restart      
          systemctl restart containerd



(2) update & restart services

        sudo update-ca-certificates  <-- it seems this one is important

            root@5g1-comp1:/etc/docker/certs.d/10.0.50.11:5000# update-ca-certificates
            Updating certificates in /etc/ssl/certs...
            rehash: warning: skipping ca-certificates.crt,it does not contain exactly one certificate or CRL
            rehash: warning: skipping duplicate certificate in ca.pem                                       
            rehash: warning: skipping duplicate certificate in 10.0.50.11:5000.crt
            rehash: warning: skipping tls.crt,it does not contain exactly one certificate or CRL            
            1 added, 0 removed; done.
            Running hooks in /etc/ca-certificates/update.d...                                               
            done.

        sudo service docker restart
        sudo systemctl restart containerd



3. kubectl apply

    root@5g1-comp1:~/Download# cat repo4.yaml
    apiVersion: v1
    kind: Pod
    metadata:
      creationTimestamp: null
      labels:
        run: srx-swarm
      name: srx-swarm
    spec:
      containers:
      - image: 10.0.50.11:5000/srx-swarm
        name: srx-swarm
        resources: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
    status: {}

    root@5g1-comp1:~/Download# kubectl apply -f repo4.yaml
    pod/srx-swarm created


    root@5g1-comp1:~/Download# kubectl get po | grep srx
    ctr-srx                1/1     Running   0          116m
    srx-5b98847545-4pw6s   1/1     Running   0          12h
    srx-swarm              1/1     Running   0          101m



    **** where ****
    - ctr-srx: In 5g1-comp1, generated ctr-srx containerd image and pushed into 10.0.50.11:5000 registry 
                And then, kubectl apply the following file
        ...
        containers:
        - image: 10.0.50.11:5000/ctr-srx:6
          name: ctr-srx
        
    - srx-5b98847545-4pw6s : ctr imported srx image which was downloaded in forms of srx.tar

    - srx-swarm: without any conversion to containerd or being imported, 
                 just used origianl docker file in the registry by applying repo4.yaml above
















