(1) cscope & ctags
====================
* <Examples>

find ./ -name '*.[ch]' | ctags -R -L -
find ./ -name '*.[ch]' > cscope.files (or when you exclude something, use 'grep -v "something"')
 e.g., --> find ./ -name '*.[ch]' | grep -v 'test_install'
cscope -b[vq]

 <CAUTION>
 If vim cannot find headers or links, try to use physical path($PWD) instead of relative path(./) in 'find' command.


* <Cscope insensitive search>
To make cscope's search (all search methods, not only egrep) case-insensitive by default, 
you must add the -C flag to your initialization command:

   :cscope add cscope.out -C
   or
   set csprg=cscope\ -C


* (Options)
-b will build the database only, without accessing the CLI; 
-R will recursively build the symbol database from the directory itâ€™s executed, down. 
-q for fast symbol lookup, at the expense of a larger database, cscope.in.out and cscope.po.out will be added.
-v verbose in line mode


* <cscope egrep pattern for special character>
 - (strings wanted to search): "[proxy] asPathList.length "
 - pattern in vim
     :cs f e [[]proxy[]][ ]  
     -- special character(s) should be enclosed with '[ ]'
     -- here '[', ']', ':space:' are targets  



(2) diff & patch
==================
find ./ -name '*.[ch]' -exec diff -wibuN {} ../0198-09-KH/{} \; > patch_09
find ./ -type f \( -name '*.[ch]' -o -name 'Makefile.am' \) -exec file {} \; | less

#practical example :  
    If there are two old-verion/  new-version/ directories,
    then "cd old-version" and command following line.

    find ./ -type f \( -name '*.[ch]' -o -name 'Makefile.am' \) -exec diff -wibuN {} ../new/{} \; > patch.diff
    diff --exclude=.p4config -uNR quagga/Makefile.am quagga-mpls/Makefile.am

 <CAUTION>
 if you just want to know what differences between orig and new(not patch purpose), just do diff without -N option. 
 Because -N option will generate lot's of new file lines unless either directory doesn't have same file.

#practical examples with Regular expression in Find
find -name "*.xls" -o -name "*.csv" ==  find -regex ".*\.\(xls\|csv\)"


* patch command
    $ patch -i <patchFileName> -p <num of leading slashes> [--dry-run]

        For example, suppose the file name in the patch file is /gnu/src/emacs/etc/NEWS. 
        Using -p0 gives the entire file name unmodified, -p1 gives gnu/src/emacs/etc/NEWS (no leading slash), 
        -p4 gives etc/NEWS, and not specifying -p at all gives NEWS. 


    - instead of '-i' option, "< filename" can be used
    - "-R" reverse patch

    (example of -p option)
    if a filename with dir is "/usr/bin/usrDir/filename", -p3 skips 3 leading slashes ("/usr/bin/" will be ignored) 
    Then, it will be "usrDir/filename"




(3) git 
==================
1. <<find a certain file>>
 $ git diff --diff-filter=D --name-only HEAD@{1} | grep "php"

2. <<git diff or log>>
 $ git log -p -3 -- $(for i in $(git ls-files); do if [ "${i%/*}" = "AS50/srx/src/server" ]; then echo $i; fi; done )
 $ git diff 0f01  -- $(for i in $(git ls-files); do if [ "${i%/*}" = "AS50/srx/src/server" ]; then echo $i; fi; done )

 $ git log -p -3 -w -- $(for i in $(git ls-files); do if [ "${i%/*}" = "AS50/srx/src/server" ]; then if [ "${i#*.}" = "c" ] || [ "${i#*.}" = "h" ]; then echo $i; fi; fi; done)
 $ git diff -w fafd4 -- $(for i in $(git ls-files); do if [ "${i%/*}" = "AS50/srx/src/server" ]; then if [ "${i#*.}" = "c" ] || [ "${i#*.}" = "h" ]; then echo $i; fi; fi; done) 
 $ git log -p -1 -w -- $(for i in $(git ls-files); do if [ "${i%/*}" = "020-03/quagga-0.99.16-srx-0.2/bgpd" ]; then echo $i; fi; done)

 $ git diff -w -b cf5ca40 -- $(for i in $(git ls-files); do if [ "${i%/*}" = "srx-0.2.0/src/client" ] || [ "${i%/*}" = "quagga-0.99.16-srx-0.2/bgpd" ]; then if [ "${i##*.}" = "c" ] || [ "${i##*.}" = "h" ]; then echo $i; fi; fi; done)

3. << compare a file between different index >>
 $ git diff -b regiQ_mthread..regiQ_comm_dgram_nonblk -- srx-0.2.0/src/client/client_connection_handler.c

4. simple form
 $ git log -p -1 -- $(git ls-files | grep \.[ch]$)

5. any commits in your current branch that aren't in the master branch on your origin remote, and those commits will be transferred to the server
 $ git log origin/master..HEAD

6. (cf) triple dots : 
    - to find the diff from their common ancestor to test
    - specifies all the commits that are reachable by either of two references but not by both of them

7. reverse order of branches
 $ git log --oneline --decorate  $(git rev-list --branches --no-walk) 
 
8. show branches relations in tree expression
 $ git log --graph --oneline --decorate --branches
9. extract a single file from a specific revision
 $ git show $REV:$FILE > file


(4) vim -substitution
======================
#1 substitution "--- ./rip..."  with "--- ../quagga-0.99.16/rip..."
:1,$ s/---\ \.\//---\ \..\/quagga-0.99.16\//g


(5) symbolic link 
==================
-- making symbolic link
 ln -sf <TARGET> <LINK_NAME>

-- removing symbolic link
 rm <LINK_NAME>

 <CAUTION>
 When removing, prevent from adding '/' at the end of <link name>, 
 otherwise "rm: cannot remove `<link name>/': Not a directory"


(6) binutils
==================
1. objdump -Sl --no-show-raw-insn lt-bgpd --start-address=0x4268c | less
2. addr2line -f -e lt-bgpd 0xb7fa36e4 : find a function name using address


(7) vertical select
=====================
1. cut -c '9[-][number]' origianl.txt > new.txt: (ex. cut -c '9-' temp>new: from 9'th byte or character, to end of line)
    (example) history | grep docker | cut -c 8- | perl -ne 'print unless $a{$_}++'
2. in Vim, ctrl+v, then select


(8) ssh tips
=================================
ssh -t -t -o StrictHostKeyChecking=no ops.emulab.antd.nist.gov
ssh-keygen & ssh-copy-id <server>
ssh -o ServerAliveInterval=100 <host>


(9) svn tips
================
1. commit only modified files 
    svn status | egrep '^M.*\.[ch]$' | sed -e 's/^. *//' > tmp.txt && svn ci --targets tmp.txt
2. SSL/TLS Error with a Subversion(SVN) Client
    svn switch --relocate https://svn.olddomain.com https://svn.newdomain.com
3. upload mydir under the server's any_dir_name directory
    svn import mydir/ https://is1.antd.nist.gov/svn/users/kyehwanl/any_dir_name


(10) tar - extract certain files
=================================
tar zxvf ts1_srx.git_03-19-2012.tar.gz --wildcards --no-anchored 'php*'
* untar a subdirectory into the current directory
  tar --strip-components=1 -zxvf wordpress.tgz
* -C, change to directory to untar
tar zxvf <tar1> -C <DIR>


(10-2) tar exclude incluce options
===================================
1. tar cvfz QuaggaSRxSuite.tar.gz --exclude='*.o' --exclude=".git" --exclude='*.lo' --exclude='_inst' --exclude='test_install' --exclude='autom4te*' --exclude='.libs' --exclude='.deps' ./QuaggaSRxSuite/
    <caution> 'exclude' swithch should be placed after to the object file (filename.tar.gz)
2. $ find project ! -type d -print | egrep '/,|%$|~$|\.old$|SCCS|/core$|\.o$|\.orig$' > Exclude  ( or > Include)
   $ tar cvfX project.tar Exclude
   $ tar cvfX project.tar -I Include


(11) gdb
==========
1. set arg <arg1> <arg2> ... <arg n>
2. set directories <source directory>
3. set step-mode on : setep command enter a certain function  even though the function was not built with -g(no debug information)
4. set stop-on-solib-event 1 : stop execution when the controlled program loads a new shared library
5. graph display 'x/48wx$esp'
6. p *pt@4 (pt: point of a struct array which has 4 array elements)

++ <TUI mode> --> refer to gdb_tips
press '-' on gdb running (tui enable|disable)
1. layout|focus <src|asm|split|regs>
2. winheight <name> <[+|-]count>
3. update: current win & execution point, refresh(Ctrl-L), info win


(12) yum rpm
=============
1. making(updating) a  yum repository : createrepo [--update] /path/to/repo 
2. download a source rpm: yumdownloader --source <package_name>
3. extract files from rpm : rpm2cpio <src.rpm> | cpio -idmv
4. yum --disablerepo="*" --enablerepo="srx" list available
5. download rpm :
    1st check to see if you have following plugin - yum install yum-plugin-downloadonly
    2nd - yum install --downloadonly [--downloaddir=<path>] <package>


(13) packet capture
====================
1. tshark: sudo tshark -i eth23 -nn -f"tcp port 179" -x -V -R"bgp.type==2 || bgp.type==1"
           sudo tshark -i veth0 -nn -f"tcp port 179" -x -V -Y"bgp.type==2 || bgp.type==1 and ip.src==10.1.1.1"
2. sudo tcpdump -i eth23 -X -nnvv port 179 and \(tcp[0x54:1] == 0x02 \)
3. capture traffic remotely over ssh: ssh node2 'sudo tshark -i eth30 -nn -f"tcp port 179" -w -' | wireshark -k -i -
4. Alternatively, tcpdump can be used as well, 'sudo tcpdump -s 0 -i eth30 "tcp port 179" -w -''
5. read a capture file: tshark -r -V file.pcap 
                        tcpdump -qns 0 -X -r file.pcap


<TroubleShoot> if "sudo: sorry, you must have a tty to run sudo" problem 
      --> comment out "Default requiretty" in /etc/sudoers
      --> OR just use a root, "ssh root@node2 '...'..."
      --> ultimately, use -t or -tt with ssh

<Example>
    $ ssh root@node2 'tshark -i eth36 -nn -f"tcp port 179" -w -' | sudo wireshark -k -i -
    $ socat EXEC:'ssh root@node2 tshark -i eth36 -nn  -w -' EXEC:'sudo wireshark -k -i -'

    FYI, emulab2 root password: 015f8cdc5bf4


(14) rsync
====================
1. backup:  rsync -avPzh --delete <src> <dest>    (-z: zipped communication, P:progressive, h:human readable)
(example) rsync -avP config_and_diff_patch/tip_command bgp2.antd.nist.gov:~/config_and_diff_patch/
2. view and diff: rsync -avni <src> <dest>
    <cf> -i(--itemize-changes): YXcstpoguax -- Y(<):sent(to remote), X(f):file, c:checksum, s:size, t:time, p:permission, o:owner...)
3. to transfer the specified files
  $  find ./ -name '*.[ch]' -print0 | rsync -avPni --files-from=- --from0 <source> <target>
  $  rsync -avPni  <source> <target>  --exclude='.git*' --exclude='test_install' --exclude="quaggasrx/[^b]*" --include="*/" --include="*.[ch]"  --exclude="*" --prune-empty-dirs
4. using ssh-tunnel ( using -u, --update :  skip files that are newer on the receiver)
  $ rsync -avPuni -e 'ssh -p 12345' kyehwanl@localhost:/users/kyehwanl/config_and_diff_patch/ ./config_and_diff_patch/
5. useful switches: avuzh (v:verbose, u: update only, z:compressed, h:human readable)


(15) grep | egrep
====================
1. recursive grep for a particular file type: 
    grep -lr --include='*.[ch]' search-pattern ./
2. exclude leading # or empty lines in file
    grep -v -E â€˜^\#|^$â€™ /etc/squid/squid.conf


(16) ssh tunnel
====================
1. ssh -f -N -L12345:node5.ex1-test.bgp-srx.emulab.antd.nist.gov:22 bgp2.antd.nist.gov
2. ssh -p 12345 -o StrictHostKeyChecking=no kyehwanl@localhost
3. [kyehwanl@localhost ~]$ ssh -fNL12345:vmware-005.antd.nist.gov:22 bgpsec1.antd.nist.gov
    then,
   [kyehwanl@localhost ~]$ rsync -avPuiz -e "ssh -p 12345" localhost:/tmp/crontab-gobgp.log ./


(17) compare two files or dirs
===============================
1. diff -qr ~peter ~george  | sort
   <example> diff -qr -x "*.o" -x "*.a" . ~/srx_test1/git.svn/quagga-gitsvn/bgpd | sort
2. vimdiff using scp
3. rsync using -ni
   (example) rsync -avPni ./*.[ch] ~/srx_test1/git.svn/quagga-gitsvn/bgpd/ | egrep '^.f\.s'


(18) redirect output from a running process
============================================
1. using gdb - A
    'ctrl-z' and 'bg' and 'touch /tmp/stdout'
    gdb -p $! ($!: background process)
    p dup2(open("/tmp/stdout", 1), 1)  [or creat("/tmp/stdout", 0600) instead of open()]
    detach and quit from gdb
    'disown' and 'logout' back in the shell [disown: avoiding SIGHUP from shell logout]
2. using gdb -B
    get running pts# with 'ps aux' and yours with 'ps -t'
    gdb -p <pid> then, 'p dup2(open("/dev/pts/<yours>", 1), 1)' ; then detach, quit
2. strace -e write=1,2 -e trace=write -p <pid>


(19) apt-get dpkg
==================
0. /etc/apt/sources.list : remote package repository
1. repository update: apt-get update    package upgrage: apt-get upgrade
2. apt-get install <package name>   apt-get [--purge] remove (purge removes all conf files, too)
3. source download: apt-get source <package name>
4. apt-cache show <package name>    apt-cache search <search string>
5. list of installed packages: dpkg -l   dpkg -L <pkg name>: list of all files of pkg
6. .deb install: dpkg -i <deb pkg>   (ignore dependencies: --force-depends)
7. GUI: gnome: synaptic, kde: muon


(20) lsof
==========
1. lsof -c <program>    lsof -i  (internet sockets)
2. lsof -p <PID>    lsof  -u (uid)
3. lsof -i[tcp|udp][@address or ip][:port]
  (example) lsof -i:6633    lsof -iTCP(|UDP)@security.kaist.ac.kr:smtp
4. lsof | grep "file.name" (plus, ps aux | grep PID): to look into where and who already opens the file


(21) dynamic-loader(ld.so) search path
=======================================
1. gcc -Wl, --verbose  (--> linker path, not dynamic-loader)
2. ld --verbose | grep SEARCH_DIR | tr -s ' ;' \\012 or \\n  (--> linker search path)
3. ldconfig -v 2>/dev/null | grep -v ^$'\t'
    (c.f.) put user-defind library to /etc/ld.so.conf.d/*.conf and then, 'ldconfig' will update ld.so.cache
4. gcc -print-search-dirs | sed '/^lib/b 1;d;:1;s,/[^/.][^/]*/\.\./,/,;t 1;s,:[^=]*=,:;,;s,;,;  ,g' | tr \; \\012
5. gcc -m64 -Xlinker --verbose  2>/dev/null | grep SEARCH | sed 's/SEARCH_DIR("=\?\([^""]\+\)"); */\1\n/g'  | grep -vE '^$'


(22) perform consecutive history commands
=========================================
1. traditional way : $!-3; !-2; !-1  (using negative number)
2. using fc,(fix command) :  fc -ln <no1> <no2>   --> display all commands between no1 and no2
   (example) A. $(fc -ln 1 3) : perform all commands between 1 and 3
             B. $(fc -ln 3 3) : perform only line 3
             OR eval "$(fc -ln 1 3)", in case parsing error occurs


(23) execute consecutive commands from history
==============================================
1. To view a range of commands in the history use the built-in fc(Fix Command) command:
        fc -ln 432 435      (-l: listed on stdout, -n: suppress the number)
2. To execute them again:
        eval "$(fc -ln 432 435)"
3. search the history using CTRL+r and type keyword, and using arrow keys to edit
    ( when matching first search, another hit CTRL+r will show next matches)
4. '! <-number>' to execute a command from history in reverse way
5. 'export HISTCONTROL=ignoredups' to eliminate the continous repeated entry,
   whereas, 'export HISTCONTROL=erasedups' to eliminate across the whole history
6. 'export HISTCONTROL=ignorespace' can hide any command typed a space in front of a command
7. 'export HISTIGNORE="pwd:ls:ls -ltr:"' to ignore specific commands

    (current configure)
      HISTSIZE=1000
      HISTIGNORE=pwd:ls:ls -htrl:ll
      HISTCONTROL=ignoredups


(24) write a file in bash script
=================================
cat << EOF > /tmp/file
..
EOF



(25) iptables firewall
======================
 iptables-save > /etc/iptables_record
 iptables-restore < /etc/iptables_record

 systemctl <status|stop|start> firewalld : Centos 7 later version

 (other command)
 firewall-cmd --add-port=3389/tcp --permanent



(26) xclip to use copy / paste between Linux/Windows
====================================================
 xclip file_name            : copy/paste with a middle button of mouse
 xclip -sel clip file_name  : copy / paste with CTRL-V or right button of mouse and select

 Usage :
    tail -n 30 logfile.log | xclip -sel clip
    cat /etc/letsencrypt/live/website/fullchain.pem | xclip -sel clip
    xclip -sel clip < ~/.ssh/id_rsa.pub  (Copies the contents of the id_rsa.pub file to your clipboard)




(27) Vim - multiple sessions
============================

  1. To make the current session stored:
      :mks[ession] ~/mysession.vim

  2. Then later you can source that vim file and you'll have your old session back:
      :source ~/mysession.vim

      or open vim with the -S option:
      $ vim -S ~/mysession.vim



(27) NTP - configure client
============================

 1. Direct command 
    # ntpdate -u <ntpserver> (0.centos.pool.ntp.org) 

 2. System service 
    (1) open /etc/ntp.conf file and add the NTP servers used in your environment.

        server 0.centos.pool.ntp.org 
        server ntp.research.gov

    (2) Configure the NTP client service to start at run level 3 when the appliance boots. Enter:
        [root@localhost] # /sbin/chkconfig --levels 3 ntpd on

    (3) checking
        [root@localhost] # /sbin/chkconfig --list ntpd
        ntpd            0:off   1:off   2:off   3:on    4:off   5:off   6:off

    (4) Start the service. Enter:
        [root@localhost] # /sbin/service ntpd start
        Starting ntpd:                                             [  OK  ]



(28) current terminal tty pts
=============================

 1. type 'tty' 
   $ tty
   /dev/pts/2 



(29) gnome shell minimized or unresponsive
===========================================
(https://askubuntu.com/questions/455301/how-can-i-restart-gnome-shell-after-it-freezes-or-becomes-unresponsive)
How can I restart GNOME Shell, after it freezes or becomes unresponsive?
The easier way is just pressing Alt + F2, type r then Enter. This will work so long the shell is usable.

You can also send SIGQUIT to the gnome-shell process which will terminate only the shell:

killall -3 gnome-shell
Other methods use more destructive means, which close all the applications, this shouldn't.




(30) LS_COLORS env variable
============================
When directory coloring doesn't appear in clear, bright, 
Use the blow command into .bashrc or command line 

    export LS_COLORS=$LS_COLORS:"di=38;5;27:" 




(31) Bash Exit Code of Last Command
===================================
1. echo $?
    Result value 0 or non-zero value

    (1) As the previous command ran successfully, the exit code is 0
    (2) Itâ€™s a non-zero value, indicating that the previous command didnâ€™t execute properly




(32) bash command checking 
==========================
1. be able to use to check whether the command already installed and ready to run or not

    $ command -v foo >/dev/null 2>&1 || { echo >&2 "I require foo but it's not installed.  Aborting."; exit 1; }
    $ type foo >/dev/null 2>&1 || { echo >&2 "I require foo but it's not installed.  Aborting."; exit 1; }
    $ hash foo 2>/dev/null || { echo >&2 "I require foo but it's not installed.  Aborting."; exit 1; }


2. bash script form

    if ! command -v <the_command> &> /dev/null
 OR if ! [ -x "$(command -v <the_command>)" ]; 
    then
        echo "<the_command> could not be found"
        exit
    fi

    (-x tests that the file is executable, which is what the question was)




(33) Repeat a Linux Command Every X seconds
===========================================
(https://www.tecmint.com/run-repeat-linux-command-every-x-seconds/)
1. watch -n 10 <command>
    (example) watch -n 5 free -m
2. for i in {1..10}; do echo -n "This is a test in loop $i "; date ; sleep 5; done
3. while true; do echo -n "This is a test of while loop";date ; sleep 5; done



(34) htop sort by key
=====================
  htop -s PERCENT_CPU
  ("htop --sort-key=help" list all items)





(ETC)
=================================
A. show file types except source files in project directory
    for i in $(git ls-files); do if [ -z "$(file $i | grep ASCII)" ]; then file $i; fi done
B. killing all bgpd processes
    for i in $(ps aux | grep bgpd | grep -v grep | awk '{print $2}'); do echo $i; sudo kill -9 $i; done
C. grep useful option : -RInHw
    R: recursive, I: skip binary file, n: line number, H: file name, w: whole word
D. for i in $(ls *.xml); do newfile=$(echo $i | sed -e s/\:/\./g); mv $i $newfile; done
E. calculation using 'bc'
   > echo "ibase=16; FFFFFFFF*FF*2" | bc
   > echo "obase=16; 408" | bc --> 198
   > echo "(" $(cat /proc/vmallocinfo | grep -v "ioremap" | awk '{print $2}' | paste -s -d "+") ")/ 1024" | bc 
F. bash shell and gdb batch-mode calculation
   $((10+1))
   $gdb -q --batch -ex "p 0xaa - 52" -ex 'p 0x82'
F' logging calculation using perl
   > tail -10000 stat.txt | perl -alne '$sum += $F[0]; END {print $sum/10000; print 1000000/($sum/10000)}'
   > i=9900; export i; tail -$i stat.txt | perl -alne '$sum += $F[0]; END { print $sum/$ENV{i}; }'
G. connect pipeline same time (T shape)
    --> date 2>&1 | tee logfile.txt | logger -t "header"
H. String Manipulation --> refere to FILE(string_manipulation_tip)
   > curl -s -I http://bgp2.antd.nist.gov | head -n 1 | cut -f 2 -d ' '
   > ps -ef > /tmp/tmp0; cat /tmp/tmp0 | tr -s " " | cut -d " " -f 2 | grep -v PID
   > cat /etc/passwd | awk -F ":" '{print $1}'
   > yes "kill" | head -$(cat /tmp/tmp0 | wc -l) | paste -d " " - /tmp/tmp0 > /tmp/tmp1
    (in paste command, there 's '-', it means using a standard input instead of a file input)
   > sudo kill -9 $(ps aux | grep bgp[d] | awk '{print $2}' | paste -s -d ' ')
   > remove brackets([ ]) --> tr -d '[]'
   > replace '-' with '_' --> echo "some_thing" | tr '_' '-' --> some-thing
I. rpm macro
   > rpmbuild --nodeps --buildroot="${PWD}/_rpm" -ba --define="_rpmdir ${PWD}" --define="_srcrpmdir ${PWD}" --define="_sourcedir ${PWD}" --define="_specdir ${PWD}" --define="_builddir ${PWD}" srxcryptoapi-0.1.1.0.spec
J. compare files over ssh with vimdiff
   vimdiff config_and_diff_patch/tip_command scp://bgp2.antd.nist.gov//users/kyehwanl/config_and_diff_patch/tip_command
    or scp://bgp2.antd.nist.gov/~/config_and_diff_patch/tip_command
   AND (in vim command mode) :vsp scp://ts1/~/Projects/proj-bgp/quaggasrx/test_install/etc/bgpd.conf
K. NFS mount: mount -t nfs -o rsize=8192,wsize=8192,nfsvers=3 fs5-141:/users/kyehwanl /users/kyehwanl
L. iptables(bgp) iptables -I INPUT 1 -p tcp --dport 179 -j ACCEPT
M. X11 configuration problem: (1) goto root with sudo -s, (2) xauth merge /users/kyehwanl/.Xauthority
N. Convert VirtualBox image to KVM: qemu-img convert mininet-vm-x86_64.vmdk -O qcow2 Mininet-VM.qcow2
   How to run: kvm -m 2048 -net nic,macaddr=00:11:22:CC:CC:10 -net tap Mininet-VM.qcow2
O. change mac address:  ifconfig s1 hw ether 3e:db:b0:4c:74:47
P. Download tarball file : curl -k -O https://address/some.tar.gz OR wget https://address/some.tar.gz
Q. shell script debugging: (1) at command line: $bash -x <shell program> (2) at script: set -x








