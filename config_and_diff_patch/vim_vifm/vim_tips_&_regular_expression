

VIM Regular Expression tips
============================

1.  s/\(.*\/\)\([0-9]\{1,2}\)\ \(.*\)/add \1\2 \2 \3/ 

   - before
  1.0.0.0/24 701 3257 13335 13335

   -  after
  add 1.0.0.0/24 24 701 3257 13335 13335



2. s/\(.*\/\)\([0-9]\{1,2}\)\ \(.*\ \)\([0-9]\+\)/add \1\2 \2 \4/

   - before
  1.0.0.0/24 701 3257 13335 13335

   -  after
  add 1.0.0.0/24 24 13335


3. s/\(.*\/\)\([0-9]\{1,2}\)\ \([0-9]\+$\)/add \1\2 \2 \3/

    in case of missing from #2, 




General Tips
============

(1) Compare files over ssh with vimdiff
     vimdiff config_and_diff_patch/tip_command scp://bgp2.antd.nist.gov//users/kyehwanl/config_and_diff_patch/tip_command
      or scp://bgp2.antd.nist.gov/~/config_and_diff_patch/tip_command
     AND (in vim command mode) :vsp scp://ts1/~/Projects/proj-bgp/quaggasrx/test_install/etc/bgpd.conf


(2) split and show list
    :20vs ./ --> same as Ctrl+e (pluggin function)


(3) capitalize first letter of each word
    :s/\<./\u&/g
    
      \<   : beginning of a word
      .    : matches the first character of a word
      \u   : make next character uppercase
      &    : matched pattern on left side


(4) Environment variable TERM change at starting 
    $ TERM=screen-256color vim <file>



(5) upper case
    
    Visual select the text, then U for uppercase or u for lowercase. 
    To swap all casing in a visual selection, press ~ (tilde). 
    
    Without using a visual selection, gU<motion> will make the characters in motion uppercase, 
    or use gu<motion> for lowercase.
    (for example, in motion: 
        gU then press '^', it converts the rest letters into upper case until the end of line)




Vimdiff tips
============

(1) Useful diff option

    set diffopt=iwhite, filler  
        (iwhite: ignore changes of white space, filler: insert lines at the same position to sync)


(2) :diffthis : to compare this window to the next window
    --> and then :diffget, or :diffput




Bundle Tips
===========

(1) Status Bar displays various information including a function name
    - Need bundle file:
        vim-powerline and tagbar plugins

    - in vimrc configuration, add followings:
        Bundle 'Lokaltog/vim-powerline'
        Bundle 'majutsushi/tagbar'


Session 
=======
 
(1) to make the current session stored:
    :mks[ession][!] ~/mysession.vim
    
(2) Then later you can source that vim file and you'll have your old session back:
    :so[urce] ~/mysession.vim

    or open vim with the -S option:
    $ vim -S ~/mysession.vim




Plugins
=======

(1) Disable auto-complete features (neocomplcache)
    :let g:neocomplcache_disable_auto_complete=1 (Entirely Disable)
    (https://stackoverflow.com/questions/21761953/how-to-disable-the-auto-complete-feature-on-periods)

    - two options are already set because of 'neocomplcache'
    :set completeopt=menuone,preview

    What we need is just menu, so cut the preview, to remove preview, (Recommended!!)
    :set completeopt-=preview





Map, noremap etc
================

  map is the "root" of all recursive mapping commands. The root form applies to all modes.
  noremap is the "root" of all non-recursive mapping commands. The root form applies to all modes.
  See below for what "recursive" means in this context.

  Prepending mode letters like n makes the root forms work in normal mode, etc.
  Use help map-modes will show you a few tables that explain how to control which modes the mapping applies to.

  (Mode letters:)
  n: normal only
  v: visual and select
  o: operator-pending
  x: visual only
  s: select only
  i: insert
  c: command-line
  l: insert, command-line, regexp-search (and others. Collectively called "Lang-Arg" pseudo-mode)

  "Recursive" means that the mapping is expanded to a result, then the result is expanded to another result, and so on.

  The expansion stops when one of these is true:
  the result is no longer mapped to anything else.
  a non-recursive mapping has been applied (i.e. the "noremap" [or one of its ilk] is the final expansion).

  At that point, vim's default "meaning" of the final result is applied/executed.
  "Non-recursive" means the mapping is only expanded once, and that result is applied/executed.

  (Example:)
   nmap K H
   nnoremap H G
   nnoremap G gg


  The above causes K to expand to H, then H to expand to G and stop. 
  It stops because of the nnoremap, which expands and stops immediately. 
  The meaning of G will be executed (i.e. "jump to last line"). 
  At most one non-recursive mapping will ever be applied in an expansion chain (it would be the last expansion to happen).
  The mapping of G to gg only applies if you press G, but not if you press K. 
  This would be true regardless of whether G was mapped recursively or not, since it's line 2 that caused the expansion of K to stop.




Cscope search with egrep
========================

1. Cscope insensitive search
  To make cscope's search (all search methods, not only egrep) case-insensitive by default,
  you must add the -C flag to your initialization command:

     :cscope add cscope.out -C
     or
     set csprg=cscope\ -C

               
2. cscope egrep pattern for special character
 - (strings wanted to search): "[proxy] asPathList.length "
 - pattern in vim
     :cs f e [[]proxy[]][ ] 
     -- special character(s) should be enclosed with '[ ]'
     -- here '[', ']', ':space:' are targets






Vim Options Compiled
====================

1. :version (same as running vim --version)

2. :echo has('python')
    then, 0 or 1 will show up as a result





Folding
=======
(https://docs.google.com/document/d/1xvgEfpoLgMjtzHZw08_UU3MNxdEkSzhrUOXDzqLamOs/edit#)



How to disable folding
====================== 

1. ViM automatically turns on folding for certain files. 
   I do not like folding and keep it disabled all the time by adding this to my vimrc:

    set nofoldenable

2. To disable only for the current session type:

    :set nofoldenable






vim에서 folding과 관련하여 문제 있었던 설정
===========================================

1. Bundle 'vim-scripts/restore_view.vim' → 이전의 fold설정이라든지 cursor설정을 기억


2. 아래 부분에서 red letter의 auto cmd부분의 fold설정을 기억하고 불러오는 부분
  " Folder Setting {
  "--------------------------------------------------
  "   when vim starts, do ":mkview"
  "   when vim leaves, do ":loadview"
  "
  "    ":mkview"   : save the folds.
  "    ":loadview" : reload the previous folds status
  "
  if argc() > 0
  "    au BufWinLeave * mkview
  "    au BufWinEnter * silent loadview

      "set foldmethod=indent
      set foldmethod=marker
      set foldlevelstart=99
      set foldmarker={,}
      "set foldmethod=manual
  endif                                                                                                                 
  ....
  "set foldmethod=marker
  "   
  " } 


3. PIV bundle설정 (참고로 Bundle 'spf13/PIV' 로 설치) autofolding과 관련

 " PIV {                                                                                                              
     let g:DisableAutoPHPFolding = 0
     let g:PIVAutoClose = 0
 " }




Vim folding commands
====================
  zf#j creates a fold from the cursor down # lines.
  zf/string creates a fold from the cursor to string .
  zj moves the cursor to the next fold.
  zk moves the cursor to the previous fold.
  zo opens a fold at the cursor.
  zO opens all folds at the cursor.
  zm increases the foldlevel by one.
  zM closes all open folds.
  zc close the fold at the cursor
  zr decreases the foldlevel by one.
  zR decreases the foldlevel to zero -- all folds will be open.
  zd deletes the fold at the cursor.
  zE deletes all folds.
  [z move to start of open fold.
  ]z move to end of open fold.





-- 프로그래밍시 폴더로 보기쉽게 ( spf-13의 설정과 같이)
=======================================================
1. set foldmarker={,}
2. set foldmethod=marker
3. set foldlevel=0
4. set foldleverstart=99






The foldmethod option
=====================
Vim's foldmethod option might be of interest to programmers. The default foldmethod is manual -- that is, creating folds manually. However, Vim can also create folds based on the way a file is indented, its syntax, or markers in the text.
To set the foldmethod according to the way a file is indented, run :set foldmethod=indent. This will automatically create folds at every indent. Consider a Cascading Style Sheet (CSS) file like this one:
 
body {
        background-color: #CCCCCC;
    font-family: arial, helvetica, sans-serif;
}

strong.header {
        font-family: arial, helvetica, sans-serif;
        color: #1D3C47;
}


Once you've set foldmethod=indent, it will look like this:
 
body {
+---  2 lines: background-color: #CCCCCC;---------------------------------------
}

strong.header {
+---  2 lines: font-family: arial, helvetica, sans-serif;-----------------------
}


Vim also offers a marker method, where folds are set by visible text markers rather than invisible manual marks. To set this mode, run :set foldmethod=marker. Then, when you set a fold, you'll see a marker with three braces at the beginning and end of the fold, like this:
 
/*{{{*/
Folded text goes here...
/*}}}*/


The braces are set off by comment characters, depending on the type of file. So, if you're working with an HTML file, you'll see <!--{{{-->, and if you're editing a Python script, you'll see #{{{. You can also insert fold markers manually if you want, and Vim will recognize them as well. Vim will also delete the markers with the zd command, whether they were set manually or not.
Fold created with the marker method are subject to undo and redo operations, unlike normal manual folds.
It's possible to set the foldmarker to something other than {{{ if you need to, but the Vim docs recommend that you stick with the defaults. To change the foldmarker, use :set foldmarker=nnn,mmmwhere nnn is the character string to start the marker, and mmm is the string to end the marker.
If you want to use a foldmethod other than "manual" all the time, add this line to your ~/.vimrc:
set foldmethod=foldoption
Vim has a few other foldmethods that may come in useful. See the foldmethod documentation in the Vim reference materials for more on the foldmethod option.



Saving folds
============

After you've gone to all the trouble of creating several folds in a longer document, it'd be a shame to lose them when you close the file. If you'd like to save the folds before you leave the file, run :mkview. When you reload the file, run :loadview, and Vim will restore the folds to the state the file was in at the time you ran :mkview.
The :mkview command supports multiple revisions of a file's state, so you can give a view a number and reload later on. For example, if you run :mkview 2, make a few changes, and then run :loadview 2, it will revert to the previous state of the file as far as folds are concerned. Note that it won't restore the file itself to the previous state; if you delete 10 lines of text after saving a view, Vim won't restore those lines when you load an older view using :loadview.
But why do something manually when you can do it automatically? To see to it that Vim saves and restores folds when a file is closed and re-opened, add these two lines to your ~/.vimrc:
 
au BufWinLeave * mkview
au BufWinEnter * silent loadview


Now, each time you close a file, its fold state will be saved and reloaded when you reopen the file in Vim.
When you add folds to other features like viewports and marks and jumps, Vim becomes an insanely productive tool for text editing and programming.





Indentation Guide lines
=======================
(https://vi.stackexchange.com/questions/666/how-to-add-indentation-guides-lines)
Simple Usage is to use following settings

set [no]cursorcolumn
set [no]cursorline





In case window switching is not working, (mapping <c-h> to <c-w>h) 
=========================================
  try following command into mappings (temp solution)

  :nnoremap <bs> <C-w>h




 Replace Tabs with Spaces in python
======================================
 retab & set expandtab

1. when using Vim to edit a downloaded or written code, there will be possibly have tab & space problem,
    which might occur compile errors.
    vim setting, ":set expandtab" cannot change the tabs which are already written
    because the setting, set expandtab, are only applied the code which is after the command starts

2. So in order for applying into the previous tabs, command, ":retab"”will change the tabs forcibly




Case incensitive search 
=========================
(https://stackoverflow.com/questions/2287440/how-to-do-case-insensitive-search-in-vim)

1.  use the \c escape sequence anywhere in the pattern. 

  For example:
	  /\ccopyright or /copyright\c or even /copyri\cght

  To do the inverse (case sensitive matching), 
	  use \C (capital C) instead.


2. add "set ignorecase" for case-insensitive searching in vimrc, 
   use \C to do a case-sensitive



3. set smartcase ( Only works when set ignorecase is already active)
















