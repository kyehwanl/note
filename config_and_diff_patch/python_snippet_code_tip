
Python Snippet Code Tip
=======================


1. version
==========
python import sys; print(sys.version)



2. subprocess input/output cascading
====================================

2.1 in bird-bgpsec, keytool.py

    procs = []
    for args in argses:
      procs.append(subprocess.Popen((self.args.openssl_binary,) + args,
                                    stdout = subprocess.PIPE,
                                    stdin = procs[-1].stdout if procs else subprocess.PIPE))
                                    # liking procs[0] 's output into the input of procs[1]
    if "input" in kwargs:
      procs[0].stdin.write(kwargs["input"])
    procs[0].stdin.close()
    output = procs[-1].stdout.read()

 

2.2 lambda with an ignored variable

 class Message ():
   Length = {                                           
       CODE.OPEN:           lambda _:  _ >= 29,  # noqa 
       CODE.UPDATE:         lambda _:  _ >= 23,  # noqa 
       CODE.NOTIFICATION:   lambda _:  _ >= 21,  # noqa 
       CODE.KEEPALIVE:      lambda _:  _ == 19,  # noqa 
       CODE.ROUTE_REFRESH:  lambda _:  _ == 23,  # noqa 
   }                                                    


 <application code>
 validator = Message.Length.get(msg, lambda _: _ >=19)
 if validator(length) :
    pass


	--> 'validator' is now function fo lambda which will have 'length' that will be 
		substituted with '_' in lambda function.

		For example, if msg == CODE.UPDATE, validator would have "lambda _: _ >=23"
					 then validtor(length=25) will be true


	(c.f.) dict.get(key[, value]) 
			Return value:
			  - the value for the specified key if key is in dictionary.
			  - None if the key is not found and value is not specified.
			  - value if the key is not found and value is specified.


3. pdb
======

3.1 attribute
     pp dir(object)
     pp locals()
     pp globals()

3.2 'whatis' : prints the type of the argument 


3.3 setting breakpoint
    3.3.1 breakpoint with set_trace()

        < in source code>
        import pdb
        ...
        pdb.set_trace()
        ...


    3.3.2 breakpoint with a dynamic condition

        b(reak) ([file:])lineno | function) [, condition]

        (Pdb) <file path>/capabilities.py:136, k == 7                    
        Breakpoint 2 at <path>/capability/capabilities.py:136 

    3.3.3 using history
        CTRL+r can be used to search in histories


3.4 execute python script in pdb command
    ! statement


3.5 'run' [args...] command
    same as 'restart', not 'start a program' the way the gdb does


3.6 ignore  bpnumber [count]
    ingore a breakpoint, it can be useful to count the number of loop 


3.7 commands [bpnumber]
    allows to run multiple commands when a breakpoint is hit

    (Pdb) commands 1
    (com) args
    (com) p "inside function()"
    (com) end
    (Pdb) c  
    Then, when the bp #1 is hit, the "commands 1" (1 is bp number)
    will be executed (args, print)


3.8 pprint for dict object
    pp (vars(object)) == pprint(vars(object))

    (c.f.) class object --> dir() instead of vars()




4. pack & unpack exmaples
=========================

(Pdb) p struct.pack("!H", 0x01)
'\x00\x01'

(Pdb) p ord(struct.pack("!B", 0x01))
1

(Pdb) socket.inet_aton("10.1.1.2")
'\n\x01\x01\x02'

(Pdb) struct.unpack("!L", socket.inet_aton("10.1.1.2"))
(167837954,)
(Pdb) struct.unpack("!L", socket.inet_aton("10.1.1.2"))[0]
167837954

addr.ipV4 = struct.unpack("!L", socket.inet_aton("10.1.1.2"))[0]



5. Replace Tabs with Spaces in python
======================================

1. when using Vim to edit a downloaded or written code, there will be possibly have tab & space problem, 
    which might occur compile errors.
    vim setting, ":set expandtab" cannot change the tabs which are already written
    because the setting, set expandtab, are only applied the code which is after the command starts

2. So in order for applying into the previous tabs, command, ":retab"‚Äùwill change the tabs forcibly
 



6. Acess C global variable by python ctypes
===========================================

  import ctypes

  class Inp(ctypes.Structure):
     _fields_ = [('In1', ctypes.c_float),
                 ('In2', ctypes.c_float)]

  class Out(ctypes.Structure):
     _fields_ = [('Out1', ctypes.c_float)]

  myLib = ctypes.CDLL('./SimpleTest.so')


  SimpleTest_initialize = myLib.SimpleTest_initialize
  SimpleTest_initialize()
  SimpleTest_Y = Out.in_dll(myLib, 'SimpleTest_Y')
  print SimpleTest_Y.Out1






7. defaultdict() & setdefault()
================================

 You could say defaultdict is useful for settings defaults before filling the dict and 
	setdefault is useful for setting defaults while or after filling the dict.

  # really verbose
  new = {}
  for (key, value) in data:
	  if key in new:
		  new[key].append( value )
	  else:
		  new[key] = [value]


  # easy with setdefault
  new = {}
  for (key, value) in data:
	  group = new.setdefault(key, []) # key might exist already
	  group.append( value )

	  # OR new.setdefault(key, []).append(value)


  # even simpler with defaultdict 
  new = defaultdict(list)
  for (key, value) in data:
	  new[key].append( value ) # all keys have a default already



  Sometimes you want to make sure that specific keys exist after creating a dict. 
	defaultdict doesn't work in this case, because it only creates keys on explicit access. 
	Think you use something HTTP-ish with many headers -- some are optional, but you want defaults for them:

  headers = parse_headers( msg ) # parse the message, get a dict
  # now add all the optional headers
  for headername, defaultvalue in optional_headers:
	  headers.setdefault( headername, defaultvalue )



8. Address of a variable
========================

	hex(id(variable))

	: id() is the actual memory address of the variable





















